name: Unit

on:
  pull_request:
  push:
  schedule:
    - cron: '0 0/2 * * *'

jobs:
  smoke-test:
    name: Smoke
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/mvorisek/image-php:${{ matrix.php }}
    strategy:
      fail-fast: false
      matrix:
        php: ['latest']
        type: ['Phpunit']
        include:
          - php: 'latest'
            type: 'CodingStyle'
          - php: 'latest'
            type: 'StaticAnalysis'
    env:
      LOG_COVERAGE: ""
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure PHP
        run: |
          if [ -n "$LOG_COVERAGE" ]; then echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; else rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; fi
          php --version

      - name: Setup cache 1/2
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup cache 2/2
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-smoke-${{ matrix.php }}-${{ matrix.type }}-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: |
          if [ "${{ matrix.type }}" != "Phpunit" ] && [ "${{ matrix.type }}" != "StaticAnalysis" ]; then composer remove --no-interaction --no-update phpunit/phpunit johnkary/phpunit-speedtrap phpunit/phpcov --dev ; fi
          if [ "${{ matrix.type }}" != "CodingStyle" ]; then composer remove --no-interaction --no-update friendsofphp/php-cs-fixer --dev ; fi
          if [ "${{ matrix.type }}" != "StaticAnalysis" ]; then composer remove --no-interaction --no-update phpstan/phpstan 'behat/*' --dev ; fi
          composer update --ansi --prefer-dist --no-interaction --no-progress --optimize-autoloader

      - name: Init
        run: |
          mkdir -p build/logs
          php demos/_demo-data/create-sqlite-db.php

      - name: "Run tests: SQLite (only for Phpunit)"
        if: matrix.type == 'Phpunit'
        run: |
          if [ -n "$LOG_COVERAGE" ]; then
            cp tools/CoverageUtil.php demos
            mkdir coverage
            vendor/bin/phpunit --exclude-group none --coverage-text -v
            ls -l coverage | wc -l && mv coverage/* build/logs
          else
            vendor/bin/phpunit --exclude-group none --no-coverage -v
          fi

      - name: Check Coding Style (only for CodingStyle)
        if: matrix.type == 'CodingStyle'
        run: |
          if [ "$(find demos/ -name '*.php' -print0 | xargs -0 grep -L "namespace Atk4\\\\Ui\\\\Demos;" | tee /dev/fd/2)" ]; then echo 'All demos/ files must have namespace declared' && (exit 1); fi
          vendor/bin/php-cs-fixer fix --dry-run --using-cache=no --diff --verbose

      - name: Run Static Analysis (only for StaticAnalysis)
        if: matrix.type == 'StaticAnalysis'
        run: |
          echo "memory_limit = 1G" > /usr/local/etc/php/conf.d/custom-memory-limit.ini
          vendor/bin/phpstan analyse

  unit-test:
    name: Unit
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/mvorisek/image-php:${{ matrix.php }}
    strategy:
      fail-fast: false
      matrix:
        php: ['7.4', 'latest']
        type: ['Phpunit']
        include:
          - php: 'latest'
            type: 'Phpunit Lowest'
          - php: 'latest'
            type: 'Phpunit Burn'
    env:
      LOG_COVERAGE: "${{ fromJSON('{true: \"1\", false: \"\"}')[matrix.php == 'latest' && matrix.type == 'Phpunit' && (github.event_name == 'pull_request' || (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master')))] }}"
    services:
      mysql:
        image: mysql:8
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5 -e MYSQL_ROOT_PASSWORD=atk4_pass_root -e MYSQL_USER=atk4_test -e MYSQL_PASSWORD=atk4_pass -e MYSQL_DATABASE=atk4_test__data --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
      mssql:
        image: mcr.microsoft.com/mssql/server
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: atk4_pass

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure PHP
        run: |
          if [ -n "$LOG_COVERAGE" ]; then echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; else rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; fi
          php --version

      - name: Setup cache 1/2
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup cache 2/2
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ matrix.type }}-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: |
          if [ "${{ matrix.type }}" != "Phpunit" ] && [ "${{ matrix.type }}" != "Phpunit Lowest" ] && [ "${{ matrix.type }}" != "Phpunit Burn" ]; then composer remove --no-interaction --no-update phpunit/phpunit johnkary/phpunit-speedtrap phpunit/phpcov --dev ; fi
          if [ "${{ matrix.type }}" != "CodingStyle" ]; then composer remove --no-interaction --no-update friendsofphp/php-cs-fixer --dev ; fi
          if [ "${{ matrix.type }}" != "StaticAnalysis" ]; then composer remove --no-interaction --no-update phpstan/phpstan 'behat/*' --dev ; fi
          composer update --ansi --prefer-dist --no-interaction --no-progress --optimize-autoloader
          if [ "${{ matrix.type }}" == "Phpunit Lowest" ]; then composer update  --ansi --prefer-dist --prefer-lowest --prefer-stable --no-interaction --no-progress --optimize-autoloader ; fi
          if [ "${{ matrix.type }}" == "Phpunit Burn" ]; then sed -i 's/ *public function runBare(): void/public function runBare(): void { gc_collect_cycles(); gc_collect_cycles(); $mem0 = memory_get_usage(); for ($i = 0; $i < '"$(if [ \"$GITHUB_EVENT_NAME\" == \"schedule\" ]; then echo 20; else echo 5; fi)"'; ++$i) { $this->_runBare(); gc_collect_cycles(); gc_collect_cycles(); if ($i === 0) { $mem1 = memory_get_usage(); } } $mem2 = memory_get_usage(); if ($mem2 - 3072 * 1024 > $mem0 || $mem2 - 1536 * 1024 > $mem1) { $this->onNotSuccessfulTest(new AssertionFailedError("Memory leak detected! (" . round($mem0 \/ (1024 * 1024), 3) . " MB + " . round(($mem1 - $mem0) \/ (1024 * 1024), 3) . " MB + " . round(($mem2 - $mem1) \/ 1024, 3) . " KB, " . $i . " iterations)")); } } private function _runBare(): void/' vendor/phpunit/phpunit/src/Framework/TestCase.php && cat vendor/phpunit/phpunit/src/Framework/TestCase.php | grep '_runBare(' ; fi

      - name: Init
        run: |
          mkdir -p build/logs
          php -r '(new PDO("mysql:host=mysql", "root", "atk4_pass_root"))->exec("ALTER USER '"'"'atk4_test'"'"'@'"'"'%'"'"' WITH MAX_USER_CONNECTIONS 5");'
          php demos/_demo-data/create-sqlite-db.php

      - name: "Run tests: SQLite (only for Phpunit)"
        if: startsWith(matrix.type, 'Phpunit')
        run: |
          if [ -n "$LOG_COVERAGE" ]; then
            cp tools/CoverageUtil.php demos
            mkdir coverage
            vendor/bin/phpunit --exclude-group none --coverage-text -v
            ls -l coverage | wc -l && mv coverage/* build/logs
          else
            vendor/bin/phpunit --exclude-group none --no-coverage -v
          fi

      - name: "Run tests: MySQL (only for Phpunit)"
        if: startsWith(matrix.type, 'Phpunit')
        run: "vendor/bin/phpunit --configuration phpunit-mysql.xml.dist --exclude-group none --no-coverage -v"

      - name: "Run tests: MSSQL (only for Phpunit)"
        if: startsWith(matrix.type, 'Phpunit')
        run: "vendor/bin/phpunit --configuration phpunit-mssql.xml.dist --exclude-group none --no-coverage -v"

      - name: Upload coverage logs 1/2 (only for "latest" Phpunit)
        if: env.LOG_COVERAGE
        run: vendor/bin/phpcov merge build/logs/ --clover build/logs/cc.xml

      - name: Upload coverage logs 2/2 (only for "latest" Phpunit)
        if: env.LOG_COVERAGE
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: build/logs/cc.xml

  behat-test:
    name: Behat
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/mvorisek/image-php:${{ matrix.php }}-node
    strategy:
      fail-fast: false
      matrix:
        php: ['latest']
        type: ['Chrome', 'Firefox', 'Chrome Lowest', 'Chrome Slow']
    env:
      LOG_COVERAGE: ''
    services:
      selenium-chrome:
        image: selenium/standalone-chrome:latest
        options: --health-cmd "/opt/bin/check-grid.sh"
      selenium-firefox:
        image: selenium/standalone-firefox:latest
        options: --health-cmd "/opt/bin/check-grid.sh"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure PHP
        run: |
          if [ -n "$LOG_COVERAGE" ]; then echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; else rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini; fi
          php --version

      - name: Setup cache 1/2
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Setup cache 2/2
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ matrix.type }}-${{ hashFiles('composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install JS dependencies (only for Slow)
        if: matrix.type == 'Chrome Slow'
        run: |
          npm install --loglevel=error -g pug-cli less less-plugin-clean-css uglify-js
          (cd js && npm ci --loglevel=error)

      - name: Lint JS files (only for Slow)
        if: matrix.type == 'Chrome Slow'
        run: |
          (cd js && npm run lint)

      - name: Build/diff HTML files (only for Slow)
        if: matrix.type == 'Chrome Slow'
        run: |
          for f in $(find template demos -name '*.pug' -o -name '*.html'); do
            fpug=${f/.[a-z]*/.pug}
            fhtml=${fpug/.pug/.html}
            mv "$fhtml" "$fhtml.orig"
            pug --silent --pretty "$fpug"
            diff "$fhtml" "$fhtml.orig"
            rm "$fhtml.orig"
          done

      - name: Build/diff CSS files (only for Slow)
        if: matrix.type == 'Chrome Slow'
        run: |
          mv public/agileui.css public/agileui.css.orig
          # prod: lessc public/agileui.less public/agileui.css --clean-css="--s1 --advanced" --source-map
          lessc public/agileui.less public/agileui.css
          diff public/agileui.css.orig public/agileui.css
          rm public/agileui.css.orig

      - name: Build/diff JS files (only for Slow)
        if: matrix.type == 'Chrome Slow'
        run: |
          cp -r public public.orig && rm public/*.js
          (cd js && npm run build)
          diff -qr public public.orig
          rm -r public.orig

      - name: Install PHP dependencies
        run: |
          composer remove --no-interaction --no-update phpunit/phpunit johnkary/phpunit-speedtrap phpunit/phpcov --dev
          composer remove --no-interaction --no-update friendsofphp/php-cs-fixer --dev
          composer remove --no-interaction --no-update phpstan/phpstan --dev
          composer update --ansi --prefer-dist --no-interaction --no-progress --optimize-autoloader
          if [ "${{ matrix.type }}" == "Chrome Lowest" ]; then composer update  --ansi --prefer-dist --prefer-lowest --prefer-stable --no-interaction --no-progress --optimize-autoloader ; fi

      - name: Init
        run: |
          mkdir -p build/logs
          php demos/_demo-data/create-sqlite-db.php
          sed -i "s~'https://raw.githack.com/atk4/ui/develop/public.*~'/public',~" src/App.php

      - name: "Run tests: Behat"
        run: |
          php -S 172.18.0.2:8888 > /dev/null 2>&1 &
          sleep 0.2
          if [ "${{ matrix.type }}" == "Firefox" ]; then sed -i "s~chrome~firefox~" behat.yml.dist ; fi
          if [ "${{ matrix.type }}" == "Chrome Slow" ]; then echo 'sleep(1);' >> demos/init-app.php ; fi

          # remove once https://github.com/minkphp/Mink/pull/801
          # and https://github.com/minkphp/MinkSelenium2Driver/pull/322 are released
          sed -i 's/usleep(100000)/usleep(5000)/' vendor/behat/mink/src/Element/Element.php
          sed -i 's/usleep(100000)/usleep(5000)/' vendor/behat/mink-selenium2-driver/src/Selenium2Driver.php

          vendor/bin/behat -vv --config behat.yml.dist
