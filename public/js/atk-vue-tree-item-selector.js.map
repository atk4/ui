{"version":3,"file":"js/atk-vue-tree-item-selector.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAgC;AAEhC,iEAAe;EACXC,IAAI,EAAE,qBAAqB;EAC3BC,QAAQ,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;EACXC,KAAK,EAAE;IAAEC,IAAI,EAAEC,MAAM;IAAEC,MAAM,EAAEC;EAAM,CAAC;EACtCC,MAAM,EAAE,CAAC,aAAa,CAAC;EACvBC,IAAI,EAAE,SAAAA,CAAA,EAAY;IACd,OAAO;MACHC,IAAI,EAAE,KAAK;MACXC,MAAM,EAAE,IAAI,CAACP,IAAI,CAACQ,EAAE,KAAK,UAAU;MACnCC,aAAa,EAAE,KAAK;MACpBD,EAAE,EAAE,IAAI,CAACR,IAAI,CAACQ,EAAE;MAChBE,KAAK,EAAE,IAAI,CAACV,IAAI,CAACU,KAAK;MACtBC,KAAK,EAAE;QACHC,MAAM,EAAE;UACJC,EAAE,EAAE,QAAQ;UACZC,GAAG,EAAE,gBAAgB;UACrBC,aAAa,EAAE;QACnB,CAAC;QACDC,QAAQ,EAAE;UACNH,EAAE,EAAE,sBAAsB;UAC1BC,GAAG,EAAE,gBAAgB;UACrBC,aAAa,EAAE;QACnB;MACJ;IACJ,CAAC;EACL,CAAC;EACDE,OAAO,EAAE,SAAAA,CAAA,EAAY;IACjB,IAAI,CAACC,WAAW,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE,SAAAA,CAAA,EAAY,CAAC,CAAC;EACvBC,QAAQ,EAAE;IACNC,UAAU,EAAE,SAAAA,CAAA,EAAY;MACpB,OAAO;QACHC,UAAU,EAAE,IAAI,CAACtB,IAAI,CAACU,KAAK,IAAI,IAAI,CAACV,IAAI,CAACU,KAAK,CAACa,MAAM,GAAG,CAAC,GAClD,IAAI,CAACjB,IAAI,GAAG,OAAO,GAAG,OAAO,GAC9B;MACV,CAAC;IACL,CAAC;IACDkB,UAAU,EAAE,SAAAA,CAAA,EAAY;MACpB,OAAO;QACHC,MAAM,EAAE,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAACC,IAAI,KAAK,QAAQ,GAAG,SAAS,GAAG;MACxF,CAAC;IACL,CAAC;IACDC,KAAK,EAAE,SAAAA,CAAA,EAAY;MACf,OAAO,IAAI,CAAC9B,IAAI,CAACH,IAAI;IACzB,CAAC;IACD6B,QAAQ,EAAE,SAAAA,CAAA,EAAY;MAClB,OAAO,IAAI,CAAChB,KAAK,IAAI,IAAI,CAACA,KAAK,CAACa,MAAM,GAAG,CAAC;IAC9C,CAAC;IACDQ,UAAU,EAAE,SAAAA,CAAA,EAAY;MACpB,OAAO,IAAI,CAACL,QAAQ,GACd,CAAC,IAAI,CAACpB,IAAI,GAAG,YAAY,GAAG,aAAa,IAAI,OAAO,GACpD,IAAI;IACd,CAAC;IACD0B,KAAK,EAAE,SAAAA,CAAA,EAAY;MACf,IAAIA,KAAK,GAAG,KAAK;MACjB,IAAI,IAAI,CAACN,QAAQ,EAAE;QACfM,KAAK,GAAG,IAAI,CAACC,UAAU,CAAC,IAAI,CAACvB,KAAK,CAAC,GAC7B,IAAI,GACH,IAAI,CAACwB,WAAW,CAAC,IAAI,CAACxB,KAAK,CAAC,GAAG,eAAe,GAAG,KAAM;MAClE,CAAC,MAAM,IAAI,IAAI,CAACyB,UAAU,CAAC,IAAI,CAAC3B,EAAE,CAAC,EAAE;QACjCwB,KAAK,GAAG,IAAI;MAChB;MAEA,OAAOA,KAAK;IAChB,CAAC;IACDI,OAAO,EAAE,SAAAA,CAAA,EAAY;MACjB,OAAO,IAAI,CAACzB,KAAK,CAAC,IAAI,CAACgB,WAAW,CAAC,CAAC,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC,IAAI,CAACG,KAAK,CAAC,GAAG,OAAO;IAC5E;EACJ,CAAC;EACDK,OAAO,EAAE;IACLF,UAAU,EAAE,SAAAA,CAAU3B,EAAE,EAAE;MACtB,OAAO,IAAI,CAACN,MAAM,CAACoC,QAAQ,CAAC9B,EAAE,CAAC;IACnC,CAAC;IACD;AACR;AACA;IACQU,WAAW,EAAE,SAAAA,CAAA,EAAY;MACrB;MACA,IAAI,CAAC,IAAI,CAACS,WAAW,CAAC,CAAC,CAAC3B,IAAI,CAACS,aAAa,EAAE;QACxC,IAAI,CAACkB,WAAW,CAAC,CAAC,CAACzB,MAAM,GAAG,IAAI,CAACqC,SAAS,CAAC,CAAC;QAC5C,IAAI,CAACZ,WAAW,CAAC,CAAC,CAAC3B,IAAI,CAACS,aAAa,GAAG,IAAI;MAChD;IACJ,CAAC;IACD8B,SAAS,EAAE,SAAAA,CAAA,EAAY;MACnB,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACC,eAAe,CAAC,CAAC,CAACC,KAAK,CAAC;MAC3D,IAAI1C,MAAM,GAAG,EAAE;MACf,IAAIC,KAAK,CAAC0C,OAAO,CAACL,UAAU,CAAC,EAAE;QAC3BtC,MAAM,GAAGsC,UAAU;MACvB,CAAC,MAAM;QACHtC,MAAM,CAAC4C,IAAI,CAACN,UAAU,CAAC;MAC3B;MAEA,OAAOtC,MAAM;IACjB,CAAC;IACD;AACR;AACA;AACA;AACA;IACQ+B,UAAU,EAAE,SAAAA,CAAUvB,KAAK,EAAE;MACzB,IAAIsB,KAAK,GAAG,IAAI;MAChB,KAAK,MAAMe,IAAI,IAAIrC,KAAK,EAAE;QACtB;QACA,IAAIqC,IAAI,CAACrC,KAAK,IAAIqC,IAAI,CAACrC,KAAK,CAACa,MAAM,GAAG,CAAC,EAAE;UACrC,IAAI,CAAC,IAAI,CAACU,UAAU,CAACc,IAAI,CAACrC,KAAK,CAAC,EAAE;YAC9BsB,KAAK,GAAG,KAAK;YAEb;UACJ;QACJ,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC9B,MAAM,CAACoC,QAAQ,CAACS,IAAI,CAACvC,EAAE,CAAC,EAAE;UACvCwB,KAAK,GAAG,KAAK;UAEb;QACJ;MACJ;MAEA,OAAOA,KAAK;IAChB,CAAC;IACD;AACR;AACA;AACA;AACA;IACQE,WAAW,EAAE,SAAAA,CAAUxB,KAAK,EAAE;MAC1B,IAAIsB,KAAK,GAAG,KAAK;MACjB,KAAK,MAAMe,IAAI,IAAIrC,KAAK,EAAE;QACtB;QACA,IAAIqC,IAAI,CAACrC,KAAK,IAAIqC,IAAI,CAACrC,KAAK,CAACa,MAAM,GAAG,CAAC,EAAE;UACrC,IAAI,IAAI,CAACW,WAAW,CAACa,IAAI,CAACrC,KAAK,CAAC,EAAE;YAC9BsB,KAAK,GAAG,IAAI;YAEZ;UACJ;QACJ;QACA,IAAI,IAAI,CAAC9B,MAAM,CAACoC,QAAQ,CAACS,IAAI,CAACvC,EAAE,CAAC,EAAE;UAC/BwB,KAAK,GAAG,IAAI;UAEZ;QACJ;MACJ;MAEA,OAAOA,KAAK;IAChB,CAAC;IACD;AACR;AACA;IACQgB,YAAY,EAAE,SAAAA,CAAA,EAAY;MACtB,IAAI,IAAI,CAACtB,QAAQ,EAAE;QACf,IAAI,CAACpB,IAAI,GAAG,CAAC,IAAI,CAACA,IAAI;MAC1B;IACJ,CAAC;IACD;AACR;AACA;IACQ2C,cAAc,EAAE,SAAAA,CAAA,EAAY;MACxB,MAAM;QAAErB;MAAQ,CAAC,GAAG,IAAI,CAACD,WAAW,CAAC,CAAC;MACtC,QAAQC,OAAO,CAACC,IAAI;QAChB,KAAK,QAAQ;UAAE;YACX,IAAI,CAACqB,kBAAkB,CAAC,CAAC;YAEzB;UACJ;QACA,KAAK,UAAU;UAAE;YACb,IAAI,CAACC,oBAAoB,CAAC,CAAC;YAE3B;UACJ;MACJ;IACJ,CAAC;IACD;AACR;AACA;AACA;AACA;IACQC,WAAW,EAAE,SAAAA,CAAA,EAAqB;MAC9B,IAAIC,UAAU,GAAG,EAAE;MAAC,SAAAC,IAAA,GAAAC,SAAA,CAAAhC,MAAA,EADEiC,MAAM,OAAArD,KAAA,CAAAmD,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;QAAND,MAAM,CAAAC,IAAA,IAAAF,SAAA,CAAAE,IAAA;MAAA;MAG5B,KAAK,MAAMC,KAAK,IAAIF,MAAM,EAAE;QACxBH,UAAU,GAAG,CAAC,GAAGA,UAAU,EAAE,GAAGK,KAAK,CAAC;MAC1C;MAEA,OAAO,CAAC,GAAG,IAAIC,GAAG,CAACN,UAAU,CAAC,CAAC;IACnC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQO,kBAAkB,EAAE,SAAAA,CAAUlD,KAAK,EAAY;MAAA,IAAVmD,GAAG,GAAAN,SAAA,CAAAhC,MAAA,QAAAgC,SAAA,QAAAO,SAAA,GAAAP,SAAA,MAAG,EAAE;MACzC,KAAK,MAAMR,IAAI,IAAIrC,KAAK,EAAE;QACtB,IAAIqC,IAAI,CAACrC,KAAK,IAAIqC,IAAI,CAACrC,KAAK,CAACa,MAAM,GAAG,CAAC,EAAE;UACrCsC,GAAG,GAAG,CAAC,GAAGA,GAAG,EAAE,GAAG,IAAI,CAACD,kBAAkB,CAACb,IAAI,CAACrC,KAAK,EAAEmD,GAAG,CAAC,CAAC;QAC/D,CAAC,MAAM;UACHA,GAAG,CAACf,IAAI,CAACC,IAAI,CAACvC,EAAE,CAAC;QACrB;MACJ;MAEA,OAAOqD,GAAG;IACd,CAAC;IACDE,MAAM,EAAE,SAAAA,CAAU7D,MAAM,EAAE0C,KAAK,EAAE;MAC7B,OAAO1C,MAAM,CAAC8D,MAAM,CAAEC,GAAG,IAAKA,GAAG,KAAKrB,KAAK,CAAC;IAChD,CAAC;IACD;AACR;AACA;IACQM,kBAAkB,EAAE,SAAAA,CAAA,EAAY;MAC5B,IAAI,IAAI,CAAClB,KAAK,KAAK,KAAK,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE;QACxC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACzB,MAAM,GAAG,CAAC,IAAI,CAACF,IAAI,CAACQ,EAAE,CAAC;QAC1C,IAAI,CAAC0D,QAAQ,CAAC,IAAI,CAAClE,IAAI,CAACQ,EAAE,CAAC;QAC3B,IAAI,IAAI,CAACmB,WAAW,CAAC,CAAC,CAACC,OAAO,CAACuC,GAAG,EAAE;UAChC,IAAI,CAACC,SAAS,CAAC,CAAC;QACpB;MACJ;MACA,IAAI,IAAI,CAAC1C,QAAQ,EAAE;QACf,IAAI,CAACpB,IAAI,GAAG,CAAC,IAAI,CAACA,IAAI;MAC1B;IACJ,CAAC;IACD;AACR;AACA;IACQ6C,oBAAoB,EAAE,SAAAA,CAAA,EAAY;MAC9B,IAAIjD,MAAM;MACV,IAAI,IAAI,CAACwB,QAAQ,EAAE;QACf;QACA,MAAM2C,WAAW,GAAG,IAAI,CAACT,kBAAkB,CAAC,IAAI,CAAClD,KAAK,CAAC;QACvD,IAAI,IAAI,CAACsB,KAAK,KAAK,KAAK,IAAI,IAAI,CAACA,KAAK,KAAK,eAAe,EAAE;UACxD9B,MAAM,GAAG,IAAI,CAACkD,WAAW,CAAC,IAAI,CAAClD,MAAM,EAAEmE,WAAW,CAAC;QACvD,CAAC,MAAM;UACH,IAAIC,IAAI,GAAG,IAAI,CAACpE,MAAM;UACtB,KAAK,MAAM0C,KAAK,IAAIyB,WAAW,EAAE;YAC7BC,IAAI,GAAG,IAAI,CAACP,MAAM,CAACO,IAAI,EAAE1B,KAAK,CAAC;UACnC;UACA1C,MAAM,GAAGoE,IAAI;QACjB;MACJ,CAAC,MAAM,IAAI,IAAI,CAACtC,KAAK,KAAK,IAAI,EAAE;QAC5B9B,MAAM,GAAG,IAAI,CAAC6D,MAAM,CAAC,IAAI,CAAC7D,MAAM,EAAE,IAAI,CAACF,IAAI,CAACQ,EAAE,CAAC;MACnD,CAAC,MAAM,IAAI,IAAI,CAACwB,KAAK,KAAK,KAAK,EAAE;QAC7B9B,MAAM,GAAG,IAAI,CAACA,MAAM;QACpBA,MAAM,CAAC4C,IAAI,CAAC,IAAI,CAAC9C,IAAI,CAACQ,EAAE,CAAC;MAC7B;MAEA,IAAI,CAACmB,WAAW,CAAC,CAAC,CAACzB,MAAM,GAAG,CAAC,GAAGA,MAAM,CAAC;MACvC,IAAI,CAACgE,QAAQ,CAACzB,IAAI,CAAC8B,SAAS,CAACrE,MAAM,CAAC,CAAC;MAErC,IAAI,IAAI,CAACyB,WAAW,CAAC,CAAC,CAACC,OAAO,CAACuC,GAAG,EAAE;QAChC,IAAI,CAACC,SAAS,CAAC,CAAC;MACpB;IACJ,CAAC;IACD;AACR;AACA;IACQF,QAAQ,EAAE,SAAAA,CAAUtB,KAAK,EAAE;MACvB,IAAI,CAACD,eAAe,CAAC,CAAC,CAACC,KAAK,GAAGA,KAAK;IACxC,CAAC;IACD;AACR;AACA;AACA;AACA;IACQD,eAAe,EAAE,SAAAA,CAAA,EAAY;MACzB,OAAO6B,QAAQ,CAACC,iBAAiB,CAAC,IAAI,CAAC9C,WAAW,CAAC,CAAC,CAAC+C,KAAK,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC;IACD;AACR;AACA;IACQN,SAAS,EAAE,SAAAA,CAAA,EAAY;MACnBxE,uDAAC,CAAC,IAAI,CAAC+E,GAAG,CAAC,CAACC,OAAO,CAAC,GAAG,GAAG,IAAI,CAACjD,WAAW,CAAC,CAAC,CAACC,OAAO,CAACiD,MAAM,CAAC,CAACC,GAAG,CAAC;QAC7DjE,EAAE,EAAE,KAAK;QACTsD,GAAG,EAAE,IAAI,CAACxC,WAAW,CAAC,CAAC,CAACC,OAAO,CAACuC,GAAG;QACnCY,MAAM,EAAE,MAAM;QACd1E,IAAI,EAAE;UAAEA,IAAI,EAAEoC,IAAI,CAAC8B,SAAS,CAAC,IAAI,CAAC5C,WAAW,CAAC,CAAC,CAACzB,MAAM;QAAE;MAC5D,CAAC,CAAC;IACN;EACJ;AACJ,CAAC","sources":["webpack://atk/./src/vue-components/tree-item-selector/tree-item-selector.component.js"],"sourcesContent":["import $ from 'external/jquery';\r\n\r\nexport default {\r\n    name: 'AtkTreeItemSelector',\r\n    template: `\r\n        <div class=\"item\" :style=\"itemMargin\">\r\n            <i :class=\"toggleIcon\" v-show=\"!isRoot\" @click=\"onToggleShow\" />\r\n            <i :class=\"getIcon\" v-show=\"!isRoot\" @click=\"onToggleSelect\" />\r\n            <div class=\"content\">\r\n                <div :style=\"itemCursor\" @click=\"onToggleSelect\">{{title}}</div>\r\n                <div v-if=\"isParent\" class=\"list\" v-show=\"open || isRoot\">\r\n                    <AtkTreeItemSelector\r\n                        v-for=\"item in item.nodes\" :key=\"item.id\"\r\n                        :item=\"item\"\r\n                        :values=\"values\"\r\n                    ></AtkTreeItemSelector>\r\n                </div>\r\n            </div>\r\n        </div>`,\r\n    props: { item: Object, values: Array },\r\n    inject: ['getRootData'],\r\n    data: function () {\r\n        return {\r\n            open: false,\r\n            isRoot: this.item.id === 'atk-root',\r\n            isInitialized: false,\r\n            id: this.item.id,\r\n            nodes: this.item.nodes,\r\n            icons: {\r\n                single: {\r\n                    on: 'circle',\r\n                    off: 'circle outline',\r\n                    indeterminate: 'dot circle outline',\r\n                },\r\n                multiple: {\r\n                    on: 'check square outline',\r\n                    off: 'square outline',\r\n                    indeterminate: 'minus square outline',\r\n                },\r\n            },\r\n        };\r\n    },\r\n    created: function () {\r\n        this.getInitData();\r\n    },\r\n    mounted: function () {},\r\n    computed: {\r\n        itemMargin: function () {\r\n            return {\r\n                marginLeft: this.item.nodes && this.item.nodes.length > 0\r\n                    ? (this.open ? '-13px' : '-10px')\r\n                    : null,\r\n            };\r\n        },\r\n        itemCursor: function () {\r\n            return {\r\n                cursor: this.isParent && this.getRootData().options.mode === 'single' ? 'default' : 'pointer',\r\n            };\r\n        },\r\n        title: function () {\r\n            return this.item.name;\r\n        },\r\n        isParent: function () {\r\n            return this.nodes && this.nodes.length > 0;\r\n        },\r\n        toggleIcon: function () {\r\n            return this.isParent\r\n                ? (this.open ? 'caret down' : 'caret right') + ' icon'\r\n                : null;\r\n        },\r\n        state: function () {\r\n            let state = 'off';\r\n            if (this.isParent) {\r\n                state = this.hasAllFill(this.nodes)\r\n                    ? 'on'\r\n                    : (this.hasSomeFill(this.nodes) ? 'indeterminate' : 'off');\r\n            } else if (this.isSelected(this.id)) {\r\n                state = 'on';\r\n            }\r\n\r\n            return state;\r\n        },\r\n        getIcon: function () {\r\n            return this.icons[this.getRootData().options.mode][this.state] + ' icon';\r\n        },\r\n    },\r\n    methods: {\r\n        isSelected: function (id) {\r\n            return this.values.includes(id);\r\n        },\r\n        /**\r\n         * Get input initial data.\r\n         */\r\n        getInitData: function () {\r\n            // check if input containing data is set and initialized.\r\n            if (!this.getRootData().item.isInitialized) {\r\n                this.getRootData().values = this.getValues();\r\n                this.getRootData().item.isInitialized = true;\r\n            }\r\n        },\r\n        getValues: function () {\r\n            const initValues = JSON.parse(this.getInputElement().value);\r\n            let values = [];\r\n            if (Array.isArray(initValues)) {\r\n                values = initValues;\r\n            } else {\r\n                values.push(initValues);\r\n            }\r\n\r\n            return values;\r\n        },\r\n        /**\r\n         * Check if all children nodes are on.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        hasAllFill: function (nodes) {\r\n            let state = true;\r\n            for (const node of nodes) {\r\n                // check children first;\r\n                if (node.nodes && node.nodes.length > 0) {\r\n                    if (!this.hasAllFill(node.nodes)) {\r\n                        state = false;\r\n\r\n                        break;\r\n                    }\r\n                } else if (!this.values.includes(node.id)) {\r\n                    state = false;\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return state;\r\n        },\r\n        /**\r\n         * Check if some children nodes are on.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        hasSomeFill: function (nodes) {\r\n            let state = false;\r\n            for (const node of nodes) {\r\n                // check children first;\r\n                if (node.nodes && node.nodes.length > 0) {\r\n                    if (this.hasSomeFill(node.nodes)) {\r\n                        state = true;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n                if (this.values.includes(node.id)) {\r\n                    state = true;\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return state;\r\n        },\r\n        /**\r\n         * Fire when arrow are click in order to show or hide children.\r\n         */\r\n        onToggleShow: function () {\r\n            if (this.isParent) {\r\n                this.open = !this.open;\r\n            }\r\n        },\r\n        /**\r\n         * Fire when checkbox is click.\r\n         */\r\n        onToggleSelect: function () {\r\n            const { options } = this.getRootData();\r\n            switch (options.mode) {\r\n                case 'single': {\r\n                    this.handleSingleSelect();\r\n\r\n                    break;\r\n                }\r\n                case 'multiple': {\r\n                    this.handleMultipleSelect();\r\n\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Merge array and remove duplicate.\r\n         *\r\n         * @returns {*[]}\r\n         */\r\n        mergeArrays: function (...arrays) {\r\n            let jointArray = [];\r\n\r\n            for (const array of arrays) {\r\n                jointArray = [...jointArray, ...array];\r\n            }\r\n\r\n            return [...new Set(jointArray)];\r\n        },\r\n        /**\r\n         * Get all ID from all chidren node.\r\n         *\r\n         * @returns {Array.<string>}\r\n         */\r\n        collectAllChildren: function (nodes, ids = []) {\r\n            for (const node of nodes) {\r\n                if (node.nodes && node.nodes.length > 0) {\r\n                    ids = [...ids, ...this.collectAllChildren(node.nodes, ids)];\r\n                } else {\r\n                    ids.push(node.id);\r\n                }\r\n            }\r\n\r\n            return ids;\r\n        },\r\n        remove: function (values, value) {\r\n            return values.filter((val) => val !== value);\r\n        },\r\n        /**\r\n         * Handle a selection when in single mode.\r\n         */\r\n        handleSingleSelect: function () {\r\n            if (this.state === 'off' && !this.isParent) {\r\n                this.getRootData().values = [this.item.id];\r\n                this.setInput(this.item.id);\r\n                if (this.getRootData().options.url) {\r\n                    this.postValue();\r\n                }\r\n            }\r\n            if (this.isParent) {\r\n                this.open = !this.open;\r\n            }\r\n        },\r\n        /**\r\n         * Handle a selection when in multiple mode.\r\n         */\r\n        handleMultipleSelect: function () {\r\n            let values;\r\n            if (this.isParent) {\r\n                // collect all children value\r\n                const childValues = this.collectAllChildren(this.nodes);\r\n                if (this.state === 'off' || this.state === 'indeterminate') {\r\n                    values = this.mergeArrays(this.values, childValues);\r\n                } else {\r\n                    let temp = this.values;\r\n                    for (const value of childValues) {\r\n                        temp = this.remove(temp, value);\r\n                    }\r\n                    values = temp;\r\n                }\r\n            } else if (this.state === 'on') {\r\n                values = this.remove(this.values, this.item.id);\r\n            } else if (this.state === 'off') {\r\n                values = this.values;\r\n                values.push(this.item.id);\r\n            }\r\n\r\n            this.getRootData().values = [...values];\r\n            this.setInput(JSON.stringify(values));\r\n\r\n            if (this.getRootData().options.url) {\r\n                this.postValue();\r\n            }\r\n        },\r\n        /**\r\n         * Set input field with current mapped model value.\r\n         */\r\n        setInput: function (value) {\r\n            this.getInputElement().value = value;\r\n        },\r\n        /**\r\n         * Get input element set for this Item Selector.\r\n         *\r\n         * @returns {HTMLElement}\r\n         */\r\n        getInputElement: function () {\r\n            return document.getElementsByName(this.getRootData().field)[0];\r\n        },\r\n        /**\r\n         * Send data using callback URL.\r\n         */\r\n        postValue: function () {\r\n            $(this.$el).parents('.' + this.getRootData().options.loader).api({\r\n                on: 'now',\r\n                url: this.getRootData().options.url,\r\n                method: 'POST',\r\n                data: { data: JSON.stringify(this.getRootData().values) },\r\n            });\r\n        },\r\n    },\r\n};\r\n"],"names":["$","name","template","props","item","Object","values","Array","inject","data","open","isRoot","id","isInitialized","nodes","icons","single","on","off","indeterminate","multiple","created","getInitData","mounted","computed","itemMargin","marginLeft","length","itemCursor","cursor","isParent","getRootData","options","mode","title","toggleIcon","state","hasAllFill","hasSomeFill","isSelected","getIcon","methods","includes","getValues","initValues","JSON","parse","getInputElement","value","isArray","push","node","onToggleShow","onToggleSelect","handleSingleSelect","handleMultipleSelect","mergeArrays","jointArray","_len","arguments","arrays","_key","array","Set","collectAllChildren","ids","undefined","remove","filter","val","setInput","url","postValue","childValues","temp","stringify","document","getElementsByName","field","$el","parents","loader","api","method"],"sourceRoot":""}