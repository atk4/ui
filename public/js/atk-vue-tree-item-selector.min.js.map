{"version":3,"file":"js/atk-vue-tree-item-selector.min.js","mappings":"0YAEA,SACIA,KAAM,sBACNC,SAAW,qrBAeXC,MAAO,CAAEC,KAAMC,OAAQC,OAAQC,OAC/BC,OAAQ,CAAC,eACTC,KAAM,WACF,MAAO,CACHC,MAAM,EACNC,OAAyB,aAAjBC,KAAKR,KAAKS,GAClBC,eAAe,EACfD,GAAID,KAAKR,KAAKS,GACdE,MAAOH,KAAKR,KAAKW,MACjBC,MAAO,CACHC,OAAQ,CACJC,GAAI,SACJC,IAAK,iBACLC,cAAe,sBAEnBC,SAAU,CACNH,GAAI,uBACJC,IAAK,iBACLC,cAAe,yBAI/B,EACAE,QAAS,WACLV,KAAKW,aACT,EACAC,QAAS,WAAa,EACtBC,SAAU,CACNC,WAAY,WACR,MAAO,CACHC,WAAYf,KAAKR,KAAKW,OAASH,KAAKR,KAAKW,MAAMa,OAAS,EACjDhB,KAAKF,KAAO,QAAU,QACvB,KAEd,EACAmB,WAAY,WACR,MAAO,CACHC,OAAQlB,KAAKmB,UAAgD,WAApCnB,KAAKoB,cAAcC,QAAQC,KAAoB,UAAY,UAE5F,EACAC,MAAO,WACH,OAAOvB,KAAKR,KAAKH,IACrB,EACA8B,SAAU,WACN,OAAOnB,KAAKG,OAASH,KAAKG,MAAMa,OAAS,CAC7C,EACAQ,WAAY,WACR,OAAOxB,KAAKmB,UACLnB,KAAKF,KAAO,aAAe,eAAiB,QAC7C,IACV,EACA2B,MAAO,WACH,IAAIA,EAAQ,MASZ,OARIzB,KAAKmB,SACLM,EAAQzB,KAAK0B,WAAW1B,KAAKG,OACvB,KACCH,KAAK2B,YAAY3B,KAAKG,OAAS,gBAAkB,MACjDH,KAAK4B,WAAW5B,KAAKC,MAC5BwB,EAAQ,MAGLA,CACX,EACAI,QAAS,WACL,OAAO7B,KAAKI,MAAMJ,KAAKoB,cAAcC,QAAQC,MAAMtB,KAAKyB,OAAS,OACrE,GAEJK,QAAS,CACLF,WAAY,SAAU3B,GAClB,OAAOD,KAAKN,OAAOqC,SAAS9B,EAChC,EAIAU,YAAa,WAEJX,KAAKoB,cAAc5B,KAAKU,gBACzBF,KAAKoB,cAAc1B,OAASM,KAAKgC,YACjChC,KAAKoB,cAAc5B,KAAKU,eAAgB,EAEhD,EACA8B,UAAW,WACP,MAAMC,EAAaC,KAAKC,MAAMnC,KAAKoC,kBAAkBC,OACrD,IAAI3C,EAAS,GAOb,OANIC,MAAM2C,QAAQL,GACdvC,EAASuC,EAETvC,EAAO6C,KAAKN,GAGTvC,CACX,EAMAgC,WAAY,SAAUvB,GAClB,IAAIsB,GAAQ,EACZ,IAAK,MAAMe,KAAQrC,EAEf,GAAIqC,EAAKrC,OAASqC,EAAKrC,MAAMa,OAAS,GAClC,IAAKhB,KAAK0B,WAAWc,EAAKrC,OAAQ,CAC9BsB,GAAQ,EAER,KACJ,OACG,IAAKzB,KAAKN,OAAOqC,SAASS,EAAKvC,IAAK,CACvCwB,GAAQ,EAER,KACJ,CAGJ,OAAOA,CACX,EAMAE,YAAa,SAAUxB,GACnB,IAAIsB,GAAQ,EACZ,IAAK,MAAMe,KAAQrC,EAAO,CAEtB,GAAIqC,EAAKrC,OAASqC,EAAKrC,MAAMa,OAAS,GAC9BhB,KAAK2B,YAAYa,EAAKrC,OAAQ,CAC9BsB,GAAQ,EAER,KACJ,CAEJ,GAAIzB,KAAKN,OAAOqC,SAASS,EAAKvC,IAAK,CAC/BwB,GAAQ,EAER,KACJ,CACJ,CAEA,OAAOA,CACX,EAIAgB,aAAc,WACNzC,KAAKmB,WACLnB,KAAKF,MAAQE,KAAKF,KAE1B,EAIA4C,eAAgB,WACZ,MAAM,QAAErB,GAAYrB,KAAKoB,cACzB,OAAQC,EAAQC,MACZ,IAAK,SACDtB,KAAK2C,qBAEL,MAEJ,IAAK,WACD3C,KAAK4C,uBAKjB,EAMAC,YAAa,WACT,IAAIC,EAAa,GAAG,QAAAC,EAAAC,UAAAhC,OADEiC,EAAM,IAAAtD,MAAAoD,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAND,EAAMC,GAAAF,UAAAE,GAE5B,IAAK,MAAMC,KAASF,EAChBH,EAAa,IAAIA,KAAeK,GAGpC,MAAO,IAAI,IAAIC,IAAIN,GACvB,EAMAO,mBAAoB,SAAUlD,GAAiB,IAAVmD,EAAGN,UAAAhC,OAAA,QAAAuC,IAAAP,UAAA,GAAAA,UAAA,GAAG,GACvC,IAAK,MAAMR,KAAQrC,EACXqC,EAAKrC,OAASqC,EAAKrC,MAAMa,OAAS,EAClCsC,EAAM,IAAIA,KAAQtD,KAAKqD,mBAAmBb,EAAKrC,MAAOmD,IAEtDA,EAAIf,KAAKC,EAAKvC,IAItB,OAAOqD,CACX,EACAE,OAAQ,SAAU9D,EAAQ2C,GACtB,OAAO3C,EAAO+D,QAAQC,GAAQA,IAAQrB,GAC1C,EAIAM,mBAAoB,WACG,QAAf3C,KAAKyB,OAAoBzB,KAAKmB,WAC9BnB,KAAKoB,cAAc1B,OAAS,CAACM,KAAKR,KAAKS,IACvCD,KAAK2D,SAAS3D,KAAKR,KAAKS,IACpBD,KAAKoB,cAAcC,QAAQuC,KAC3B5D,KAAK6D,aAGT7D,KAAKmB,WACLnB,KAAKF,MAAQE,KAAKF,KAE1B,EAIA8C,qBAAsB,WAClB,IAAIlD,EACJ,GAAIM,KAAKmB,SAAU,CAEf,MAAM2C,EAAc9D,KAAKqD,mBAAmBrD,KAAKG,OACjD,GAAmB,QAAfH,KAAKyB,OAAkC,kBAAfzB,KAAKyB,MAC7B/B,EAASM,KAAK6C,YAAY7C,KAAKN,OAAQoE,OACpC,CACH,IAAIC,EAAO/D,KAAKN,OAChB,IAAK,MAAM2C,KAASyB,EAChBC,EAAO/D,KAAKwD,OAAOO,EAAM1B,GAE7B3C,EAASqE,CACb,CACJ,KAA0B,OAAf/D,KAAKyB,MACZ/B,EAASM,KAAKwD,OAAOxD,KAAKN,OAAQM,KAAKR,KAAKS,IACtB,QAAfD,KAAKyB,QACZ/B,EAASM,KAAKN,OACdA,EAAO6C,KAAKvC,KAAKR,KAAKS,KAG1BD,KAAKoB,cAAc1B,OAAS,IAAIA,GAChCM,KAAK2D,SAASzB,KAAK8B,UAAUtE,IAEzBM,KAAKoB,cAAcC,QAAQuC,KAC3B5D,KAAK6D,WAEb,EAIAF,SAAU,SAAUtB,GAChBrC,KAAKoC,kBAAkBC,MAAQA,CACnC,EAMAD,gBAAiB,WACb,OAAO6B,SAASC,kBAAkBlE,KAAKoB,cAAc+C,OAAO,EAChE,EAIAN,UAAW,WACPO,IAAEpE,KAAKqE,KAAKC,QAAQ,IAAMtE,KAAKoB,cAAcC,QAAQkD,QAAQC,IAAI,CAC7DlE,GAAI,MACJsD,IAAK5D,KAAKoB,cAAcC,QAAQuC,IAChCa,OAAQ,OACR5E,KAAM,CAAEA,KAAMqC,KAAK8B,UAAUhE,KAAKoB,cAAc1B,UAExD,G","sources":["webpack://atk/./src/vue-components/tree-item-selector/tree-item-selector.component.js"],"sourcesContent":["import $ from 'external/jquery';\r\n\r\nexport default {\r\n    name: 'AtkTreeItemSelector',\r\n    template: `\r\n        <div class=\"item\" :style=\"itemMargin\">\r\n            <i :class=\"toggleIcon\" v-show=\"!isRoot\" @click=\"onToggleShow\" />\r\n            <i :class=\"getIcon\" v-show=\"!isRoot\" @click=\"onToggleSelect\" />\r\n            <div class=\"content\">\r\n                <div :style=\"itemCursor\" @click=\"onToggleSelect\">{{title}}</div>\r\n                <div v-if=\"isParent\" class=\"list\" v-show=\"open || isRoot\">\r\n                    <AtkTreeItemSelector\r\n                        v-for=\"item in item.nodes\" :key=\"item.id\"\r\n                        :item=\"item\"\r\n                        :values=\"values\"\r\n                    ></AtkTreeItemSelector>\r\n                </div>\r\n            </div>\r\n        </div>`,\r\n    props: { item: Object, values: Array },\r\n    inject: ['getRootData'],\r\n    data: function () {\r\n        return {\r\n            open: false,\r\n            isRoot: this.item.id === 'atk-root',\r\n            isInitialized: false,\r\n            id: this.item.id,\r\n            nodes: this.item.nodes,\r\n            icons: {\r\n                single: {\r\n                    on: 'circle',\r\n                    off: 'circle outline',\r\n                    indeterminate: 'dot circle outline',\r\n                },\r\n                multiple: {\r\n                    on: 'check square outline',\r\n                    off: 'square outline',\r\n                    indeterminate: 'minus square outline',\r\n                },\r\n            },\r\n        };\r\n    },\r\n    created: function () {\r\n        this.getInitData();\r\n    },\r\n    mounted: function () {},\r\n    computed: {\r\n        itemMargin: function () {\r\n            return {\r\n                marginLeft: this.item.nodes && this.item.nodes.length > 0\r\n                    ? (this.open ? '-13px' : '-10px')\r\n                    : null,\r\n            };\r\n        },\r\n        itemCursor: function () {\r\n            return {\r\n                cursor: this.isParent && this.getRootData().options.mode === 'single' ? 'default' : 'pointer',\r\n            };\r\n        },\r\n        title: function () {\r\n            return this.item.name;\r\n        },\r\n        isParent: function () {\r\n            return this.nodes && this.nodes.length > 0;\r\n        },\r\n        toggleIcon: function () {\r\n            return this.isParent\r\n                ? (this.open ? 'caret down' : 'caret right') + ' icon'\r\n                : null;\r\n        },\r\n        state: function () {\r\n            let state = 'off';\r\n            if (this.isParent) {\r\n                state = this.hasAllFill(this.nodes)\r\n                    ? 'on'\r\n                    : (this.hasSomeFill(this.nodes) ? 'indeterminate' : 'off');\r\n            } else if (this.isSelected(this.id)) {\r\n                state = 'on';\r\n            }\r\n\r\n            return state;\r\n        },\r\n        getIcon: function () {\r\n            return this.icons[this.getRootData().options.mode][this.state] + ' icon';\r\n        },\r\n    },\r\n    methods: {\r\n        isSelected: function (id) {\r\n            return this.values.includes(id);\r\n        },\r\n        /**\r\n         * Get input initial data.\r\n         */\r\n        getInitData: function () {\r\n            // check if input containing data is set and initialized.\r\n            if (!this.getRootData().item.isInitialized) {\r\n                this.getRootData().values = this.getValues();\r\n                this.getRootData().item.isInitialized = true;\r\n            }\r\n        },\r\n        getValues: function () {\r\n            const initValues = JSON.parse(this.getInputElement().value);\r\n            let values = [];\r\n            if (Array.isArray(initValues)) {\r\n                values = initValues;\r\n            } else {\r\n                values.push(initValues);\r\n            }\r\n\r\n            return values;\r\n        },\r\n        /**\r\n         * Check if all children nodes are on.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        hasAllFill: function (nodes) {\r\n            let state = true;\r\n            for (const node of nodes) {\r\n                // check children first;\r\n                if (node.nodes && node.nodes.length > 0) {\r\n                    if (!this.hasAllFill(node.nodes)) {\r\n                        state = false;\r\n\r\n                        break;\r\n                    }\r\n                } else if (!this.values.includes(node.id)) {\r\n                    state = false;\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return state;\r\n        },\r\n        /**\r\n         * Check if some children nodes are on.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        hasSomeFill: function (nodes) {\r\n            let state = false;\r\n            for (const node of nodes) {\r\n                // check children first;\r\n                if (node.nodes && node.nodes.length > 0) {\r\n                    if (this.hasSomeFill(node.nodes)) {\r\n                        state = true;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n                if (this.values.includes(node.id)) {\r\n                    state = true;\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return state;\r\n        },\r\n        /**\r\n         * Fire when arrow are click in order to show or hide children.\r\n         */\r\n        onToggleShow: function () {\r\n            if (this.isParent) {\r\n                this.open = !this.open;\r\n            }\r\n        },\r\n        /**\r\n         * Fire when checkbox is click.\r\n         */\r\n        onToggleSelect: function () {\r\n            const { options } = this.getRootData();\r\n            switch (options.mode) {\r\n                case 'single': {\r\n                    this.handleSingleSelect();\r\n\r\n                    break;\r\n                }\r\n                case 'multiple': {\r\n                    this.handleMultipleSelect();\r\n\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Merge array and remove duplicate.\r\n         *\r\n         * @returns {*[]}\r\n         */\r\n        mergeArrays: function (...arrays) {\r\n            let jointArray = [];\r\n            for (const array of arrays) {\r\n                jointArray = [...jointArray, ...array];\r\n            }\r\n\r\n            return [...new Set(jointArray)];\r\n        },\r\n        /**\r\n         * Get all ID from all children node.\r\n         *\r\n         * @returns {Array.<string>}\r\n         */\r\n        collectAllChildren: function (nodes, ids = []) {\r\n            for (const node of nodes) {\r\n                if (node.nodes && node.nodes.length > 0) {\r\n                    ids = [...ids, ...this.collectAllChildren(node.nodes, ids)];\r\n                } else {\r\n                    ids.push(node.id);\r\n                }\r\n            }\r\n\r\n            return ids;\r\n        },\r\n        remove: function (values, value) {\r\n            return values.filter((val) => val !== value);\r\n        },\r\n        /**\r\n         * Handle a selection when in single mode.\r\n         */\r\n        handleSingleSelect: function () {\r\n            if (this.state === 'off' && !this.isParent) {\r\n                this.getRootData().values = [this.item.id];\r\n                this.setInput(this.item.id);\r\n                if (this.getRootData().options.url) {\r\n                    this.postValue();\r\n                }\r\n            }\r\n            if (this.isParent) {\r\n                this.open = !this.open;\r\n            }\r\n        },\r\n        /**\r\n         * Handle a selection when in multiple mode.\r\n         */\r\n        handleMultipleSelect: function () {\r\n            let values;\r\n            if (this.isParent) {\r\n                // collect all children value\r\n                const childValues = this.collectAllChildren(this.nodes);\r\n                if (this.state === 'off' || this.state === 'indeterminate') {\r\n                    values = this.mergeArrays(this.values, childValues);\r\n                } else {\r\n                    let temp = this.values;\r\n                    for (const value of childValues) {\r\n                        temp = this.remove(temp, value);\r\n                    }\r\n                    values = temp;\r\n                }\r\n            } else if (this.state === 'on') {\r\n                values = this.remove(this.values, this.item.id);\r\n            } else if (this.state === 'off') {\r\n                values = this.values;\r\n                values.push(this.item.id);\r\n            }\r\n\r\n            this.getRootData().values = [...values];\r\n            this.setInput(JSON.stringify(values));\r\n\r\n            if (this.getRootData().options.url) {\r\n                this.postValue();\r\n            }\r\n        },\r\n        /**\r\n         * Set input field with current mapped model value.\r\n         */\r\n        setInput: function (value) {\r\n            this.getInputElement().value = value;\r\n        },\r\n        /**\r\n         * Get input element set for this Item Selector.\r\n         *\r\n         * @returns {HTMLElement}\r\n         */\r\n        getInputElement: function () {\r\n            return document.getElementsByName(this.getRootData().field)[0];\r\n        },\r\n        /**\r\n         * Send data using callback URL.\r\n         */\r\n        postValue: function () {\r\n            $(this.$el).parents('.' + this.getRootData().options.loader).api({\r\n                on: 'now',\r\n                url: this.getRootData().options.url,\r\n                method: 'POST',\r\n                data: { data: JSON.stringify(this.getRootData().values) },\r\n            });\r\n        },\r\n    },\r\n};\r\n"],"names":["name","template","props","item","Object","values","Array","inject","data","open","isRoot","this","id","isInitialized","nodes","icons","single","on","off","indeterminate","multiple","created","getInitData","mounted","computed","itemMargin","marginLeft","length","itemCursor","cursor","isParent","getRootData","options","mode","title","toggleIcon","state","hasAllFill","hasSomeFill","isSelected","getIcon","methods","includes","getValues","initValues","JSON","parse","getInputElement","value","isArray","push","node","onToggleShow","onToggleSelect","handleSingleSelect","handleMultipleSelect","mergeArrays","jointArray","_len","arguments","arrays","_key","array","Set","collectAllChildren","ids","undefined","remove","filter","val","setInput","url","postValue","childValues","temp","stringify","document","getElementsByName","field","$","$el","parents","loader","api","method"],"sourceRoot":""}