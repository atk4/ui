{"version":3,"file":"js/atk-vue-tree-item-selector.min.js","mappings":"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","sources":["webpack://atk/./src/vue-components/tree-item-selector/tree-item-selector.component.js"],"sourcesContent":["import $ from 'external/jquery';\r\n\r\nconst template = `<div class=\"item\" :style=\"itemMargin\">\r\n        <i :class=\"toggleIcon\" @click=\"onToggleShow\" v-show=\"!isRoot\"></i>\r\n        <i :class=\"getIcon\" @click=\"onToggleSelect\" v-show=\"!isRoot\"></i>\r\n        <div class=\"content\" >\r\n          <div @click=\"onToggleSelect\" :style=\"itemCursor\">{{title}}</div>\r\n          <div class=\"list\" v-show=\"open || isRoot\" v-if=\"isParent\" >\r\n            <atk-tree-item-selector v-for=\"(item, index) in item.nodes\" :key=\"item.id\" :item=\"item\" :values=\"values\">\r\n            </atk-tree-item-selector>\r\n          </div>\r\n        </div>\r\n     </div>`;\r\n\r\nexport default {\r\n    template: template,\r\n    props: { item: Object, values: Array },\r\n    inject: ['getRootData'],\r\n    name: 'atk-tree-item-selector',\r\n    data: function () {\r\n        return {\r\n            open: false,\r\n            isRoot: this.item.id === 'atk-root',\r\n            isInitialized: false,\r\n            id: this.item.id,\r\n            nodes: this.item.nodes,\r\n            icons: {\r\n                single: {\r\n                    on: 'circle',\r\n                    off: 'circle outline',\r\n                    indeterminate: 'dot circle outline',\r\n                },\r\n                multiple: {\r\n                    on: 'check square outline',\r\n                    off: 'square outline',\r\n                    indeterminate: 'minus square outline',\r\n                },\r\n            },\r\n        };\r\n    },\r\n    created: function () {\r\n        this.getInitData();\r\n    },\r\n    mounted: function () {\r\n    },\r\n    computed: {\r\n        itemMargin: function () {\r\n            return { marginLeft: (this.item.nodes && this.item.nodes.length > 0) ? this.open ? '-13px' : '-10px' : null };\r\n        },\r\n        itemCursor: function () {\r\n            return { cursor: this.isParent ? this.getRootData().options.mode === 'single' ? 'default' : 'pointer' : 'pointer' };\r\n        },\r\n        title: function () {\r\n            return this.item.name;\r\n        },\r\n        isParent: function () {\r\n            return (this.nodes && this.nodes.length > 0);\r\n        },\r\n        toggleIcon: function () {\r\n            return this.isParent ? (this.open ? 'caret down' : 'caret right') + ' icon' : null;\r\n        },\r\n        state: function () {\r\n            let state = 'off';\r\n            if (this.isParent) {\r\n                state = this.hasAllFill(this.nodes) ? 'on' : this.hasSomeFill(this.nodes) ? 'indeterminate' : 'off';\r\n            } else if (this.isSelected(this.id)) {\r\n                state = 'on';\r\n            }\r\n\r\n            return state;\r\n        },\r\n        getIcon: function () {\r\n            return this.icons[this.getRootData().options.mode][this.state] + ' icon';\r\n        },\r\n    },\r\n    methods: {\r\n        isSelected: function (id) {\r\n            return this.values.filter((val) => val === id).length > 0;\r\n        },\r\n        /**\r\n         * Get input initial data.\r\n         */\r\n        getInitData: function () {\r\n            // check if input containing data is set and initialized.\r\n            if (!this.getRootData().item.isInitialized) {\r\n                this.getRootData().values = this.getValues();\r\n                this.getRootData().item.isInitialized = true;\r\n            }\r\n        },\r\n        getValues: function () {\r\n            const initValues = JSON.parse(this.getInputElement().value);\r\n            let values = [];\r\n            if (Array.isArray(initValues)) {\r\n                values = initValues;\r\n            } else {\r\n                values.push(initValues);\r\n            }\r\n\r\n            return values;\r\n        },\r\n        /**\r\n         * Check if all children nodes are on.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        hasAllFill: function (nodes) {\r\n            let state = true;\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                // check children first;\r\n                if (nodes[i].nodes && nodes[i].nodes.length > 0) {\r\n                    if (!this.hasAllFill(nodes[i].nodes)) {\r\n                        state = false;\r\n\r\n                        break;\r\n                    }\r\n                } else if (this.values.findIndex((id) => id === nodes[i].id) === -1) {\r\n                    state = false;\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return state;\r\n        },\r\n        /**\r\n         * Check if some children nodes are on.\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        hasSomeFill: function (nodes) {\r\n            let state = false;\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                // check children first;\r\n                if (nodes[i].nodes && nodes[i].nodes.length > 0) {\r\n                    if (this.hasSomeFill(nodes[i].nodes)) {\r\n                        state = true;\r\n\r\n                        break;\r\n                    }\r\n                }\r\n                if (this.values.findIndex((id) => id === nodes[i].id) > -1) {\r\n                    state = true;\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return state;\r\n        },\r\n        /**\r\n         * Fire when arrow are click in order to show or hide children.\r\n         */\r\n        onToggleShow: function () {\r\n            if (this.isParent) {\r\n                this.open = !this.open;\r\n            }\r\n        },\r\n        /**\r\n         * Fire when checkbox is click.\r\n         */\r\n        onToggleSelect: function () {\r\n            const { options } = this.getRootData();\r\n            switch (options.mode) {\r\n                case 'single':\r\n                    this.handleSingleSelect();\r\n\r\n                    break;\r\n                case 'multiple':\r\n                    this.handleMultipleSelect();\r\n\r\n                    break;\r\n            }\r\n        },\r\n        /**\r\n         * Merge array and remove duplicate.\r\n         *\r\n         * @returns {*[]}\r\n         */\r\n        mergeArrays: function (...arrays) {\r\n            let jointArray = [];\r\n\r\n            arrays.forEach((array) => {\r\n                jointArray = [...jointArray, ...array];\r\n            });\r\n\r\n            return [...new Set([...jointArray])];\r\n        },\r\n        /**\r\n         * Get all id from all chidren node.\r\n         *\r\n         * @returns {Array.<string>}\r\n         */\r\n        collectAllChildren: function (nodes, ids = []) {\r\n            nodes.forEach((node) => {\r\n                if (node.nodes && node.nodes.length > 0) {\r\n                    ids.concat(this.collectAllChildren(node.nodes, ids));\r\n                } else {\r\n                    ids.push(node.id);\r\n                }\r\n            });\r\n\r\n            return ids;\r\n        },\r\n        remove: function (values, value) {\r\n            return values.filter((val) => val !== value);\r\n        },\r\n        /**\r\n         * Handle a selection when in single mode.\r\n         */\r\n        handleSingleSelect: function () {\r\n            if (this.state === 'off' && !this.isParent) {\r\n                this.getRootData().values = [this.item.id];\r\n                this.setInput(this.item.id);\r\n                if (this.getRootData().options.url) {\r\n                    this.postValue();\r\n                }\r\n            }\r\n            if (this.isParent) {\r\n                this.open = !this.open;\r\n            }\r\n        },\r\n        /**\r\n         * Handle a selection when in multiple mode.\r\n         */\r\n        handleMultipleSelect: function () {\r\n            let values;\r\n            if (this.isParent) {\r\n                // collect all children value\r\n                const childValues = this.collectAllChildren(this.nodes);\r\n                if (this.state === 'off' || this.state === 'indeterminate') {\r\n                    values = this.mergeArrays(this.values, childValues);\r\n                } else {\r\n                    let temp = this.values;\r\n                    childValues.forEach((value) => {\r\n                        temp = this.remove(temp, value);\r\n                    });\r\n                    values = temp;\r\n                }\r\n            } else if (this.state === 'on') {\r\n                values = this.remove(this.values, this.item.id);\r\n            } else if (this.state === 'off') {\r\n                values = this.values;\r\n                values.push(this.item.id);\r\n            }\r\n\r\n            this.getRootData().values = [...values];\r\n            this.setInput(JSON.stringify(values));\r\n\r\n            if (this.getRootData().options.url) {\r\n                this.postValue();\r\n            }\r\n        },\r\n        /**\r\n         * Set input field with current mapped model value.\r\n         */\r\n        setInput: function (value) {\r\n            // console.log('set input');\r\n            this.getInputElement().value = value;\r\n        },\r\n        /**\r\n         * Get input element set for this Item Selector.\r\n         *\r\n         * @returns {HTMLElement}\r\n         */\r\n        getInputElement: function () {\r\n            return document.getElementsByName(this.getRootData().field)[0];\r\n        },\r\n        /**\r\n         * Send data using callback url.\r\n         */\r\n        postValue: function () {\r\n            $(this.$el).parents('.' + this.getRootData().options.loader).api({\r\n                on: 'now',\r\n                url: this.getRootData().options.url,\r\n                method: 'POST',\r\n                data: { data: JSON.stringify(this.getRootData().values) },\r\n            });\r\n        },\r\n    },\r\n};\r\n"],"names":["template","props","item","Object","values","Array","inject","name","data","open","isRoot","this","id","isInitialized","nodes","icons","single","on","off","indeterminate","multiple","created","getInitData","mounted","computed","itemMargin","marginLeft","length","itemCursor","cursor","isParent","getRootData","options","mode","title","toggleIcon","state","hasAllFill","hasSomeFill","isSelected","getIcon","methods","filter","val","getValues","initValues","JSON","parse","getInputElement","value","isArray","push","i","findIndex","onToggleShow","onToggleSelect","handleSingleSelect","handleMultipleSelect","mergeArrays","jointArray","arrays","forEach","array","Set","collectAllChildren","ids","node","concat","remove","setInput","url","postValue","childValues","temp","stringify","document","getElementsByName","field","$","$el","parents","loader","api","method"],"sourceRoot":""}