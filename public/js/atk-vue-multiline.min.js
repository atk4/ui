"use strict";(self.webpackChunkatk=self.webpackChunkatk||[]).push([[71],{77590:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});n(9228),n(90170),n(42381),n(67242),n(42359),n(59668),n(62052);var i=n(21145),a=n.n(i),l=n(86157);var o=n(30901),s=n(49880);const r={name:"AtkMultilineCell",template:'\n        <component\n            :is="getComponent()"\n            v-bind="getComponentProps()"\n            ref="cell"\n            :fluid="true"\n            class="fluid"\n            @update:modelValue="onInput"\n            v-model="inputValue"\n            :name="inputName"\n        ></component>',components:{AtkMultilineReadonly:{name:"AtkMultilineReadonly",template:"<div>{{readOnlyValue}}</div>",props:["readOnlyValue"]},AtkMultilineTextarea:{name:"AtkMultilineTextarea",template:'<textarea v-model="modelValue" @input="onInput" />',props:["modelValue"],emits:["update:modelValue"],methods:{onInput:function(e){this.$emit("update:modelValue",e.target.value)}}},AtkDatePicker:o.Z,AtkLookup:s.Z},props:["cellData","fieldValue"],data:function(){return{fieldName:this.cellData.name,type:this.cellData.type,inputName:"-"+this.cellData.name,inputValue:this.fieldValue}},emits:["update-value"],methods:{getComponent:function(){return this.cellData.definition.component},getComponentProps:function(){return"AtkMultilineReadonly"===this.getComponent()?{readOnlyValue:this.fieldValue}:this.cellData.definition.componentProps},onInput:function(e){this.inputValue=e,this.$emit("update-value",this.fieldName,this.inputValue)}}},u={name:"AtkMultilineHeader",template:'\n        <SuiTableHeader>\n            <SuiTableRow v-if="hasError()">\n                <SuiTableCell :style="{ background: \'none\' }" />\n                <SuiTableCell :style="{ background: \'none\' }"\n                    state="error"\n                    v-for="column in columns"\n                    :textAlign="getTextAlign(column)"\n                >\n                    <SuiIcon v-if="getErrorMsg(column)" name="attention" />\n                    {{getErrorMsg(column)}}\n                </SuiTableCell>\n            </SuiTableRow>\n            <SuiTableRow v-if="hasCaption()">\n                <SuiTableHeaderCell :colspan="getVisibleColumns()">{{caption}}</SuiTableHeaderCell>\n            </SuiTableRow>\n            <SuiTableRow :verticalAlign="\'top\'">\n                <SuiTableHeaderCell :width=1 textAlign="center">\n                    <input ref="check" type="checkbox" @input="onToggleDeleteAll" :checked="isChecked" :indeterminate="isIndeterminate" />\n                </SuiTableHeaderCell>\n                <SuiTableHeaderCell\n                    v-for="column in columns"\n                    :width=column.cellProps.width\n                    :textAlign="getTextAlign(column)"\n                >\n                    <div>{{column.caption}}</div>\n                    <div v-if="false" :style="{ position: \'absolute\', top: \'-22px\' }">\n                        <SuiLabel v-if="getErrorMsg(column)" pointing="below" basic color="red">{{getErrorMsg(column)}}</SuiLabel>\n                    </div>\n                </SuiTableHeaderCell>\n            </SuiTableRow>\n        </SuiTableHeader>',props:["fields","state","errors","caption"],data:function(){return{columns:this.fields,isDeleteAll:!1}},methods:{onToggleDeleteAll:function(){this.$nextTick((()=>{l.Z.eventBus.emit(this.$root.$el.id+"-toggle-delete-all",{isOn:this.$refs.check.checked})}))},getTextAlign:function(e){let t="left";if(!e.isEditable)switch(e.type){case"integer":case"float":case"atk4_money":t="right"}return t},getVisibleColumns:function(){let e=1;return this.columns.forEach((t=>{e=t.isVisible?e+1:e})),e},hasError:function(){return Object.keys(this.errors).length>0},hasCaption:function(){return this.caption},getErrorMsg:function(e){if(this.hasError()){const t=Object.keys(this.errors);for(let n=0;n<t.length;n++){const i=this.errors[t[n]].filter((t=>t.name===e.name));if(i.length>0)return i[0].msg}}return null}},computed:{isIndeterminate:function(){return"indeterminate"===this.state},isChecked:function(){return"on"===this.state}}},d={name:"AtkMultiline",template:'\n        <div>\n            <SuiTable v-bind="tableProp">\n                <AtkMultilineHeader\n                    :fields="fieldData"\n                    :state="getMainToggleState"\n                    :errors="errors"\n                    :caption="caption"\n                ></AtkMultilineHeader>\n                <AtkMultilineBody\n                    @onTabLastRow="onTabLastRow"\n                    :fieldDefs="fieldData"\n                    :rowData="rowData"\n                    :deletables="getDeletables"\n                    :errors="errors"\n                ></AtkMultilineBody>\n                <SuiTableFooter>\n                    <SuiTableRow>\n                        <SuiTableHeaderCell />\n                        <SuiTableHeaderCell :colspan="getSpan" textAlign="right">\n                            <SuiButtonGroup>\n                                <SuiButton ref="addBtn" size="small" @click.stop.prevent="onAdd" type="button" icon :disabled="isLimitReached">\n                                    <SuiIcon name="plus" />\n                                </SuiButton>\n                                <SuiButton size="small" @click.stop.prevent="onDelete" type="button" icon :disabled="isDeleteDisable">\n                                    <SuiIcon name="trash" />\n                                </SuiButton>\n                            </SuiButtonGroup>\n                        </SuiTableHeaderCell>\n                    </SuiTableRow>\n                </SuiTableFooter>\n            </SuiTable>\n            <div>\n                <input ref="atkmlInput" :form="form" :name="name" type="hidden" :value="value" />\n            </div>\n        </div>',props:{data:Object},data:function(){return{form:this.data.formName,value:this.data.inputValue,name:this.data.inputName,rowData:[],fieldData:this.data.fields||[],eventFields:this.data.eventFields||[],deletables:[],hasChangeCb:this.data.hasChangeCb,errors:{},caption:this.data.caption||null,tableProp:{basic:!1,celled:!1,collapsing:!1,stackable:!1,inverted:!1,...this.data.tableProps||{}}}},components:{AtkMultilineHeader:u,AtkMultilineBody:{name:"AtkMultilineBody",template:'\n        <SuiTableBody>\n            <AtkMultilineRow\n                :fields="fields"\n                v-for="(row, i) in rows" :key="row.__atkml"\n                @onTabLastColumn="onTabLastColumn(i)"\n                :rowId="row.__atkml"\n                :isDeletable="isDeletableRow(row)"\n                :rowValues="row"\n                :error="getError(row.__atkml)"\n            ></AtkMultilineRow>\n        </SuiTableBody>',props:["fieldDefs","rowData","deletables","errors"],data:function(){return{fields:this.fieldDefs}},created:function(){},components:{AtkMultilineRow:{name:"AtkMultilineRow",template:'\n        <SuiTableRow :verticalAlign="\'middle\'">\n            <SuiTableCell textAlign="center">\n                <input type="checkbox" @input="onToggleDelete" v-model="toDelete" />\n            </SuiTableCell>\n            <SuiTableCell\n                v-for="(column, i) in columns"\n                @keydown.tab="onTab(i)"\n                v-bind="column.cellProps"\n                :width=null\n                :state="getErrorState(column)"\n                :style="{ overflow: \'visible\' }"\n            >\n                <AtkMultilineCell\n                    :cellData="column"\n                    @update-value="onUpdateValue"\n                    :fieldValue="getValue(column)"\n                ></AtkMultilineCell>\n            </SuiTableCell>\n        </SuiTableRow>',props:["fields","rowId","isDeletable","rowValues","error"],data:function(){return{columns:this.fields}},components:{AtkMultilineCell:r},computed:{toDelete:{get:function(){return this.isDeletable},set:function(e){return e}}},emits:["onTabLastColumn"],methods:{onTab:function(e){e===this.columns.filter((e=>e.isEditable)).length&&this.$emit("onTabLastColumn")},getErrorState:function(e){if(this.error){if(this.error.filter((t=>e.name===t.name)).length>0)return"error"}return null},getColumnWidth:function(e){return e.fieldOptions?e.fieldOptions.width:null},onEdit:function(){this.isEditing=!0},onToggleDelete:function(e){l.Z.eventBus.emit(this.$root.$el.id+"-toggle-delete",{rowId:this.rowId})},onUpdateValue:function(e,t){l.Z.eventBus.emit(this.$root.$el.id+"-update-row",{rowId:this.rowId,fieldName:e,value:t})},getValue:function(e){return this.rowValues[e.name]||e.default}}}},computed:{rows:function(){return this.rowData}},emits:["onTabLastRow"],methods:{onTabLastColumn:function(e){e+1===this.rowData.length&&this.$emit("onTabLastRow")},isDeletableRow:function(e){return-1!==this.deletables.indexOf(e.__atkml)},getError:function(e){return e in this.errors?this.errors[e]:null}}}},mounted:function(){this.rowData=this.buildRowData(this.value?this.value:"[]"),this.updateInputValue(),l.Z.eventBus.on(this.$root.$el.id+"-update-row",(e=>{this.onUpdate(e.rowId,e.fieldName,e.value)})),l.Z.eventBus.on(this.$root.$el.id+"-toggle-delete",(e=>{const t=this.deletables.indexOf(e.rowId);-1!==t?this.deletables.splice(t,1):this.deletables.push(e.rowId)})),l.Z.eventBus.on(this.$root.$el.id+"-toggle-delete-all",(e=>{this.deletables=[],e.isOn&&this.rowData.forEach((e=>{this.deletables.push(e.__atkml)}))})),l.Z.eventBus.on(this.$root.$el.id+"-multiline-rows-error",(e=>{this.errors={...e.errors}}))},methods:{onTabLastRow:function(){!this.isLimitReached&&this.data.addOnTab&&this.onAdd()},onAdd:function(){const e=this.createRow(this.data.fields);this.rowData.push(e),this.updateInputValue(),this.data.afterAdd&&"function"==typeof this.data.afterAdd&&this.data.afterAdd(JSON.parse(this.value)),this.fetchExpression(e.__atkml),this.fetchOnChangeAction()},onDelete:function(){this.deletables.forEach((e=>{this.deleteRow(e)})),this.deletables=[],this.updateInputValue(),this.fetchOnChangeAction(),this.data.afterDelete&&"function"==typeof this.data.afterDelete&&this.data.afterDelete(JSON.parse(this.value))},onUpdate:function(e,t,n){this.updateFieldInRow(e,t,n),this.clearError(e,t),this.updateInputValue(),this.onUpdate.debouncedFx||(this.onUpdate.debouncedFx=l.Z.createDebouncedFx((()=>{this.onUpdate.debouncedFx=null,this.fetchExpression(e),this.fetchOnChangeAction(t)}),250)),this.onUpdate.debouncedFx.call(this)},createRow:function(e){const t={};return e.forEach((e=>{t[e.name]=e.default})),t.__atkml=this.getUUID(),t},deleteRow:function(e){this.rowData.splice(this.rowData.findIndex((t=>t.__atkml===e)),1),delete this.errors[e]},updateFieldInRow:function(e,t,n){this.rowData.forEach((i=>{i.__atkml===e&&(i[t]=n)}))},clearError:function(e,t){if(e in this.errors){const n=this.errors[e].filter((e=>e.name!==t));this.errors[e]=[...n],0===n.length&&delete this.errors[e]}},updateInputValue:function(){this.value=JSON.stringify(this.rowData)},buildRowData:function(e){const t=JSON.parse(e);return t.forEach((e=>{e.__atkml=this.getUUID()})),t},hasExpression:function(){return this.fieldData.filter((e=>e.isExpr)).length>0},fetchOnChangeAction:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;!this.hasChangeCb||null!==e&&-1===this.eventFields.indexOf(e)||a()(this.$refs.addBtn.$el).api({on:"now",url:this.data.url,method:"POST",data:{__atkml_action:"on-change",rows:this.value}})},postData:async function(e){const t={...e},n=this.$refs.addBtn.$el;t.__atkml_action="update-row";try{return await l.Z.apiService.suiFetch(this.data.url,{data:t,method:"POST",stateContext:n})}catch(e){console.error(e)}},fetchExpression:async function(e){if(this.hasExpression()){const t=this.findRow(e);if(t){const n=await this.postData(t);if(n.expressions){Object.keys(n.expressions).forEach((t=>{this.updateFieldInRow(e,t,n.expressions[t])})),this.updateInputValue()}}}},findRow:function(e){return this.rowData.find((t=>t.__atkml===e))},getInputElement:function(){return this.$refs.atkmlInput},getUUID:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=Math.floor(16*Math.random());return("x"===e?t:11&t).toString(16)}))}},computed:{getSpan:function(){return this.fieldData.length-1},getDeletables:function(){return this.deletables},getMainToggleState:function(){let e="off";return this.deletables.length>0&&(e=this.deletables.length===this.rowData.length?"on":"indeterminate"),e},isDeleteDisable:function(){return!this.deletables.length>0},isLimitReached:function(){return 0!==this.data.rowLimit&&this.data.rowLimit<this.rowData.length+1}}}},30901:(e,t,n)=>{n.d(t,{Z:()=>i});const i={name:"AtkDatePicker",template:'<FlatpickrPicker v-model="date" :config="flatPickr" />',props:["config","value"],data:function(){const{useDefault:e,...t}=this.config;return!e||t.defaultDate||this.value?this.value&&(t.defaultDate=this.value):t.defaultDate=new Date,t.locale||(t.locale=flatpickr.l10ns.default),{flatPickr:t,date:null}},emits:["setDefault"],mounted:function(){!this.value&&this.flatPickr.defaultDate&&(this.flatPickr.defaultDate instanceof Date?this.$emit("setDefault",flatpickr.formatDate(this.config.defaultDate,this.config.dateFormat)):this.$emit("setDefault",this.flatPickr.defaultDate))}}},49880:(e,t,n)=>{n.d(t,{Z:()=>a});var i=n(86157);const a={name:"AtkLookup",template:'\n        <SuiDropdown\n            v-bind="dropdownProps"\n            ref="drop"\n            @update:modelValue="onChange"\n            @filtered="onFiltered"\n            v-model="current"\n            :class="css"\n        ></SuiDropdown>',props:["config","value","optionalValue"],data:function(){const{url:e,reference:t,ui:n,...i}=this.config;return i.selection=!0,{dropdownProps:i,current:this.value,url:e||null,css:[n],isLoading:!1,field:t,query:"",temp:""}},mounted:function(){this.optionalValue&&(this.dropdownProps.options=Array.isArray(this.optionalValue)?this.optionalValue:[this.optionalValue])},emits:["update:modelValue"],methods:{onChange:function(e){this.current=e.value,this.$emit("update:modelValue",this.current)},onFiltered:function(e){e&&(this.isLoading=!0),this.onFiltered.debouncedFx||(this.onFiltered.debouncedFx=i.Z.createDebouncedFx((()=>{this.onFiltered.debouncedFx=null,this.query!==this.temp&&(this.query=this.temp,this.query&&this.fetchItems(this.query))}),250)),this.temp=e,this.onFiltered.debouncedFx(this)},fetchItems:async function(e){try{const t={atkVueLookupQuery:e,atkVueLookupField:this.field},n=await i.Z.apiService.suiFetch(this.url,{method:"get",data:t});n.success&&(this.dropdownProps.options=n.results)}catch(e){console.error(e)}finally{this.isLoading=!1}}}}}}]);
//# sourceMappingURL=atk-vue-multiline.min.js.map