{"version":3,"file":"js/atk-vue-multiline.min.js","mappings":"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","sources":["webpack://atk/./src/vue-components/multiline/multiline-readonly.component.js","webpack://atk/./src/vue-components/multiline/multiline-textarea.component.js","webpack://atk/./src/vue-components/multiline/multiline-cell.component.js","webpack://atk/./src/vue-components/multiline/multiline-header.component.js","webpack://atk/./src/vue-components/multiline/multiline.component.js","webpack://atk/./src/vue-components/multiline/multiline-body.component.js","webpack://atk/./src/vue-components/multiline/multiline-row.component.js","webpack://atk/./src/vue-components/share/atk-date-picker.js","webpack://atk/./src/vue-components/share/atk-lookup.js"],"sourcesContent":["/**\n * Simply display a readonly value.\n */\nexport default {\n    template: '<div>{{readOnlyValue}}</div>',\n    name: 'atk-multiline-readonly',\n    props: ['readOnlyValue'],\n};\n","export default {\n    name: 'atk-textarea',\n    template: '<textarea v-model=\"text\" @input=\"handleChange\"></textarea>',\n    props: { value: [String, Number] },\n    data: function () {\n        return { text: this.value };\n    },\n    methods: {\n        handleChange: function (event) {\n            this.$emit('input', event.target.value);\n        },\n    },\n};\n","import multilineReadOnly from './multiline-readonly.component';\nimport multilineTextarea from './multiline-textarea.component';\nimport atkDatePicker from '../share/atk-date-picker';\nimport atkLookup from '../share/atk-lookup';\n\nexport default {\n    name: 'atk-multiline-cell',\n    template: `\n    <component :is=\"getComponent()\"\n        :fluid=\"true\"\n        class=\"fluid\"\n        @input=\"onInput\"\n        @onChange=\"onChange\"\n        v-model=\"inputValue\"\n        :name=\"inputName\"\n        ref=\"cell\"\n        v-bind=\"getComponentProps()\"></component>\n  `,\n    components: {\n        'atk-multiline-readonly': multilineReadOnly,\n        'atk-multiline-textarea': multilineTextarea,\n        'atk-date-picker': atkDatePicker,\n        'atk-lookup': atkLookup,\n    },\n    props: ['cellData', 'fieldValue'],\n    data: function () {\n        return {\n            fieldName: this.cellData.name,\n            type: this.cellData.type,\n            inputName: '-' + this.cellData.name,\n            inputValue: this.fieldValue,\n        };\n    },\n    methods: {\n        getComponent: function () {\n            return this.cellData.definition.component;\n        },\n        getComponentProps: function () {\n            if (this.getComponent() === 'atk-multiline-readonly') {\n                return { readOnlyValue: this.fieldValue };\n            }\n\n            return this.cellData.definition.componentProps;\n        },\n        onInput: function (value) {\n            this.inputValue = this.getTypeValue(value);\n            this.$emit('update-value', this.fieldName, this.inputValue);\n        },\n        onChange: function (value) {\n            this.onInput(value);\n        },\n        /**\n         * return input value based on their type.\n         */\n        getTypeValue: function (value) {\n            let r = value;\n            if (this.type === 'boolean') {\n                r = value.target.checked;\n            }\n\n            return r;\n        },\n    },\n};\n","import atk from 'atk';\n\nexport default {\n    name: 'atk-multiline-header',\n    template: `\n     <sui-table-header>\n       <sui-table-row v-if=\"hasError()\">\n        <sui-table-cell :style=\"{ background: 'none' }\"></sui-table-cell>\n        <sui-table-cell :style=\"{ background: 'none' }\" state=\"error\" v-for=\"(column, idx) in columns\" :key=\"idx\" v-if=\"column.isVisible\" :textAlign=\"getTextAlign(column)\"><sui-icon name=\"attention\" v-if=\"getErrorMsg(column)\"></sui-icon>{{getErrorMsg(column)}}</sui-table-cell>\n      </sui-table-row>\n       <sui-table-row v-if=\"hasCaption()\">\n        <sui-table-headerCell :colspan=\"getVisibleColumns()\">{{caption}}</sui-table-headerCell>\n       </sui-table-row>\n        <sui-table-row :verticalAlign=\"'top'\">\n        <sui-table-header-cell width=\"one\" textAlign=\"center\"><input type=\"checkbox\" @input=\"onToggleDeleteAll\" :checked.prop=\"isChecked\" :indeterminate.prop=\"isIndeterminate\" ref=\"check\"></sui-table-header-cell>\n        <sui-table-header-cell v-for=\"(column, idx) in columns\" :key=\"idx\" v-if=\"column.isVisible\" :textAlign=\"getTextAlign(column)\">\n         <div>{{column.caption}}</div>\n         <div :style=\"{ position: 'absolute', top: '-22px' }\" v-if=\"false\"><sui-label pointing=\"below\" basic color=\"red\" v-if=\"getErrorMsg(column)\">{{getErrorMsg(column)}}</sui-label></div>\n        </sui-table-header-cell>\n      </sui-table-row>\n    </sui-table-header>\n  `,\n    props: ['fields', 'state', 'errors', 'caption'],\n    data: function () {\n        return { columns: this.fields, isDeleteAll: false };\n    },\n    methods: {\n        onToggleDeleteAll: function () {\n            this.$nextTick(() => {\n                atk.eventBus.emit(this.$root.$el.id + '-toggle-delete-all', { isOn: this.$refs.check.checked });\n            });\n        },\n        getTextAlign: function (column) {\n            let align = 'left';\n            if (!column.isEditable) {\n                switch (column.type) {\n                    case 'money':\n                    case 'integer':\n                    case 'number':\n                        align = 'right';\n\n                        break;\n                }\n            }\n\n            return align;\n        },\n        getVisibleColumns: function () {\n            let count = 1; // add deletable column;\n            this.columns.forEach((field) => {\n                count = field.isVisible ? count + 1 : count;\n            });\n\n            return count;\n        },\n        hasError: function () {\n            return Object.keys(this.errors).length > 0;\n        },\n        hasCaption: function () {\n            return this.caption;\n        },\n        getErrorMsg: function (column) {\n            if (this.hasError()) {\n                const rows = Object.keys(this.errors);\n                for (let i = 0; i < rows.length; i++) {\n                    const error = this.errors[rows[i]].filter((col) => col.name === column.name);\n                    if (error.length > 0) {\n                        return error[0].msg;\n                    }\n                }\n            }\n\n            return null;\n        },\n    },\n    computed: {\n        isIndeterminate: function () {\n            return this.state === 'indeterminate';\n        },\n        isChecked: function () {\n            return this.state === 'on';\n        },\n    },\n};\n","import $ from 'external/jquery';\nimport atk from 'atk';\nimport multilineBody from './multiline-body.component';\nimport multilineHeader from './multiline-header.component';\n\nexport default {\n    name: 'atk-multiline',\n    template: `<div>\n                <sui-table v-bind=\"tableProp\">\n                  <atk-multiline-header :fields=\"fieldData\" :state=\"getMainToggleState\" :errors=\"errors\" :caption=\"caption\"></atk-multiline-header>\n                  <atk-multiline-body @onTabLastRow=\"onTabLastRow\" :fieldDefs=\"fieldData\" :rowData=\"rowData\" :deletables=\"getDeletables\" :errors=\"errors\"></atk-multiline-body>\n                  <sui-table-footer>\n                    <sui-table-row>\n                        <sui-table-header-cell />\n                        <sui-table-header-cell :colspan=\"getSpan\" textAlign=\"right\">\n                        <div is=\"sui-button-group\">\n                         <sui-button size=\"small\" @click.stop.prevent=\"onAdd\" type=\"button\" icon=\"plus\" ref=\"addBtn\" :disabled=\"isLimitReached\"></sui-button>\n                         <sui-button size=\"small\" @click.stop.prevent=\"onDelete\" type=\"button\" icon=\"trash\" :disabled=\"isDeleteDisable\"></sui-button>\n                         </div>\n                        </sui-table-header-cell>\n                    </sui-table-row>\n                  </sui-table-footer>\n                </sui-table>\n                <div><input :form=\"form\" :name=\"name\" type=\"hidden\" :value=\"value\" ref=\"atkmlInput\"></div>\n             </div>`,\n    props: {\n        data: Object,\n    },\n    data: function () {\n        const tableDefault = {\n            basic: false,\n            celled: false,\n            collapsing: false,\n            stackable: false,\n            inverted: false,\n        };\n\n        return {\n            form: this.data.formName,\n            value: this.data.inputValue,\n            name: this.data.inputName, // form input name where to set multiline content value.\n            rowData: [],\n            fieldData: this.data.fields || [],\n            eventFields: this.data.eventFields || [],\n            deletables: [],\n            hasChangeCb: this.data.hasChangeCb,\n            errors: {},\n            caption: this.data.caption || null,\n            tableProp: { ...tableDefault, ...this.data.tableProps || {} },\n        };\n    },\n    components: {\n        'atk-multiline-body': multilineBody,\n        'atk-multiline-header': multilineHeader,\n    },\n    mounted: function () {\n        this.rowData = this.buildRowData(this.value);\n        this.updateInputValue();\n\n        atk.eventBus.on(this.$root.$el.id + '-update-row', (payload) => {\n            this.onUpdate(payload.rowId, payload.fieldName, payload.value);\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-toggle-delete', (payload) => {\n            const idx = this.deletables.indexOf(payload.rowId);\n            if (idx > -1) {\n                this.deletables.splice(idx, 1);\n            } else {\n                this.deletables.push(payload.rowId);\n            }\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-toggle-delete-all', (payload) => {\n            this.deletables = [];\n            if (payload.isOn) {\n                this.rowData.forEach((row) => {\n                    this.deletables.push(row.__atkml);\n                });\n            }\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-multiline-rows-error', (payload) => {\n            this.errors = { ...payload.errors };\n        });\n    },\n    methods: {\n        onTabLastRow: function () {\n            if (!this.isLimitReached && this.data.addOnTab) {\n                this.onAdd();\n            }\n        },\n        onAdd: function () {\n            const newRow = this.createRow(this.data.fields);\n            this.rowData.push(newRow);\n            this.updateInputValue();\n            if (this.data.afterAdd && typeof this.data.afterAdd === 'function') {\n                this.data.afterAdd(atk.utils.json().tryParse(this.value));\n            }\n            this.fetchExpression(newRow.__atkml);\n            this.fetchOnChangeAction();\n        },\n        onDelete: function () {\n            this.deletables.forEach((atkmlId) => {\n                this.deleteRow(atkmlId);\n            });\n            this.deletables = [];\n            this.updateInputValue();\n            this.fetchOnChangeAction();\n            if (this.data.afterDelete && typeof this.data.afterDelete === 'function') {\n                this.data.afterDelete(atk.utils.json().tryParse(this.value));\n            }\n        },\n        onUpdate: function (atkmlId, fieldName, value) {\n            this.updateFieldInRow(atkmlId, fieldName, value);\n            this.clearError(atkmlId, fieldName);\n            this.updateInputValue();\n\n            atk.debounce(() => {\n                this.fetchExpression(atkmlId);\n                this.fetchOnChangeAction(fieldName);\n            }, 300).call(this);\n        },\n        /**\n         * Creates a new row of data and\n         * set values to default if available.\n         */\n        createRow: function (fields) {\n            const row = {};\n            fields.forEach((field) => {\n                row[field.name] = field.default;\n            });\n            row.__atkml = this.getUUID();\n\n            return row;\n        },\n        deleteRow: function (atkmlId) {\n            this.rowData.splice(this.rowData.findIndex((row) => row.__atkml === atkmlId), 1);\n            delete this.errors[atkmlId];\n        },\n        /**\n         * Update the value of the field in rowData.\n         */\n        updateFieldInRow: function (atkmlId, fieldName, value) {\n            this.rowData.forEach((row) => {\n                if (row.__atkml === atkmlId) {\n                    row[fieldName] = value;\n                }\n            });\n        },\n        clearError: function (atkmlId, fieldName) {\n            if (atkmlId in this.errors) {\n                const errors = this.errors[atkmlId].filter((error) => error.name !== fieldName);\n                this.errors[atkmlId] = [...errors];\n                if (errors.length === 0) {\n                    delete this.errors[atkmlId];\n                }\n            }\n        },\n        /**\n         * Update Multi-line Form input with all rowData values\n         * as json string.\n         */\n        updateInputValue: function () {\n            this.value = JSON.stringify(this.rowData);\n        },\n        /**\n         * Build rowData from json string.\n         */\n        buildRowData: function (jsonValue) {\n            const rows = atk.utils.json().tryParse(jsonValue, []);\n            rows.forEach((row) => {\n                row.__atkml = this.getUUID();\n            });\n\n            return rows;\n        },\n        /**\n         * Check if one of the field use expression.\n         */\n        hasExpression: function () {\n            return this.fieldData.filter((field) => field.isExpr).length > 0;\n        },\n        /**\n         * Send on change action to server.\n         * Use regular api call in order\n         * for return js to be fully evaluate.\n         */\n        fetchOnChangeAction: function (fieldName = null) {\n            if (this.hasChangeCb && (fieldName === null || this.eventFields.indexOf(fieldName) > -1)) {\n                $(this.$refs.addBtn.$el).api({\n                    on: 'now',\n                    url: this.data.url,\n                    method: 'POST',\n                    data: { __atkml_action: 'on-change', rows: this.value },\n                });\n            }\n        },\n        postData: async function (row) {\n            const data = { ...row };\n            const context = this.$refs.addBtn.$el;\n            data.__atkml_action = 'update-row';\n            try {\n                return await atk.apiService.suiFetch(this.data.url, { data: data, method: 'POST', stateContext: context });\n            } catch (e) {\n                console.error(e);\n            }\n        },\n        /**\n         * Get expressions values from server.\n         */\n        fetchExpression: async function (atkmlId) {\n            if (this.hasExpression()) {\n                const row = this.findRow(atkmlId);\n                // server will return expression field - value if define.\n                if (row) {\n                    const resp = await this.postData(row);\n                    if (resp.expressions) {\n                        const fields = Object.keys(resp.expressions);\n                        fields.forEach((field) => {\n                            this.updateFieldInRow(atkmlId, field, resp.expressions[field]);\n                        });\n                        this.updateInputValue();\n                    }\n                }\n            }\n        },\n        findRow: function (atkmlId) {\n            return this.rowData.find((row) => row.__atkml === atkmlId);\n        },\n        getInputElement: function () {\n            return this.$refs.atkmlInput;\n        },\n        /**\n         * UUID v4 generator.\n         */\n        getUUID: function () {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n                const r = Math.floor(Math.random() * 16);\n                const v = c === 'x' ? r : (r & (0x3 | 0x8)); // eslint-disable-line no-bitwise\n\n                return v.toString(16);\n            });\n        },\n    },\n    computed: {\n        getSpan: function () {\n            return this.fieldData.length - 1;\n        },\n        getDeletables: function () {\n            return this.deletables;\n        },\n        /**\n         * Return Delete all checkbox state base on\n         * deletables entries.\n         */\n        getMainToggleState: function () {\n            let state = 'off';\n            if (this.deletables.length > 0) {\n                if (this.deletables.length === this.rowData.length) {\n                    state = 'on';\n                } else {\n                    state = 'indeterminate';\n                }\n            }\n\n            return state;\n        },\n        isDeleteDisable: function () {\n            return !this.deletables.length > 0;\n        },\n        isLimitReached: function () {\n            if (this.data.rowLimit === 0) {\n                return false;\n            }\n\n            return this.data.rowLimit < this.rowData.length + 1;\n        },\n    },\n};\n","import multilineRow from './multiline-row.component';\n\nexport default {\n    name: 'atk-multiline-body',\n    template: `\n    <sui-table-body>\n      <atk-multiline-row v-for=\"(row, idx) in rows\" :key=\"row.__atkml\"\n      @onTabLastColumn=\"onTabLastColumn(idx)\"\n      :fields=\"fields\"\n      :rowId=\"row.__atkml\"\n      :isDeletable=\"isDeletableRow(row)\"\n      :rowValues=\"row\"\n      :error=\"getError(row.__atkml)\"></atk-multiline-row>\n    </sui-table-body>\n  `,\n    props: ['fieldDefs', 'rowData', 'deletables', 'errors'],\n    data: function () {\n        return { fields: this.fieldDefs };\n    },\n    created: function () {\n    },\n    components: {\n        'atk-multiline-row': multilineRow,\n    },\n    computed: {\n        rows: function () {\n            return this.rowData;\n        },\n    },\n    methods: {\n        onTabLastColumn: function (idx) {\n            if (idx + 1 === this.rowData.length) {\n                this.$emit('onTabLastRow');\n            }\n        },\n        isDeletableRow: function (row) {\n            return this.deletables.indexOf(row.__atkml) > -1;\n        },\n        getError: function (rowId) {\n            if (rowId in this.errors) {\n                return this.errors[rowId];\n            }\n\n            return null;\n        },\n    },\n};\n","import atk from 'atk';\nimport multilineCell from './multiline-cell.component';\n\n/**\n * This will create a table td element using sui-table-cell.\n * The td element is created only if column as set isVisible = true;\n * The td element will add a multiline cell element.\n * the multiline cell will set it's own template component depending on the fieldType.\n * getValue\n */\nexport default {\n    name: 'atk-multiline-row',\n    template: `\n    <sui-table-row :verticalAlign=\"'middle'\">\n        <sui-table-cell width=\"one\" textAlign=\"center\"><input type=\"checkbox\" @input=\"onToggleDelete\" v-model=\"toDelete\"></sui-table-cell>\n        <sui-table-cell @keydown.tab=\"onTab(idx)\" v-for=\"(column, idx) in columns\" :key=\"idx\" :state=\"getErrorState(column)\" v-bind=\"column.cellProps\" :style=\"{ overflow: 'visible' }\" v-if=\"column.isVisible\">\n         <atk-multiline-cell\n           :cellData=\"column\"\n           @update-value=\"onUpdateValue\"\n           :fieldValue=\"getValue(column)\"></atk-multiline-cell>\n        </sui-table-cell>\n    </sui-table-row>\n  `,\n    props: ['fields', 'rowId', 'isDeletable', 'rowValues', 'error'],\n    data: function () {\n        return { columns: this.fields };\n    },\n    components: {\n        'atk-multiline-cell': multilineCell,\n    },\n    computed: {\n    /**\n     * toDelete is bind by v-model, thus we need a setter for\n     * computed property to work.\n     * When isDeletable is pass, will set checkbox according to it's value.\n     */\n        toDelete: {\n            get: function () {\n                return this.isDeletable;\n            },\n            set: function (v) {\n                return v;\n            },\n        },\n    },\n    methods: {\n        onTab: function (idx) {\n            if (idx === this.columns.filter((column) => column.isEditable).length) {\n                this.$emit('onTabLastColumn');\n            }\n        },\n        getErrorState: function (column) {\n            if (this.error) {\n                const error = this.error.filter((e) => column.name === e.name);\n                if (error.length > 0) {\n                    return 'error';\n                }\n            }\n\n            return null;\n        },\n        getColumnWidth: function (column) {\n            return column.fieldOptions ? column.fieldOptions.width : null;\n        },\n        onEdit: function () {\n            this.isEditing = true;\n        },\n        onToggleDelete: function (e) {\n            atk.eventBus.emit(this.$root.$el.id + '-toggle-delete', { rowId: this.rowId });\n        },\n        onUpdateValue: function (fieldName, value) {\n            atk.eventBus.emit(this.$root.$el.id + '-update-row', { rowId: this.rowId, fieldName: fieldName, value: value });\n        },\n        getValue: function (column) {\n            return this.rowValues[column.name] || column.default;\n        },\n    },\n};\n","/* global flatpickr */ // loaded after main JS\n\n/**\n * Wrapper for vue-flatpickr-component component.\n * https://github.com/ankurk91/vue-flatpickr-component\n *\n * Props:\n * config: Any of flatpickr options\n *\n * Will emit a dateChange event when date is set.\n */\n\nconst template = '<flatpickr-picker v-model=\"date\" :config=\"flatPickr\" @on-change=\"onChange\"></flatpickr-picker>';\n\nexport default {\n    name: 'atk-date-picker',\n    template: template,\n    props: ['config', 'value'],\n    data: function () {\n        const { useDefault, ...fpickr } = this.config;\n\n        if (useDefault && !fpickr.defaultDate && !this.value) {\n            fpickr.defaultDate = new Date();\n        } else if (this.value) {\n            fpickr.defaultDate = this.value;\n        }\n\n        if (!fpickr.locale) {\n            fpickr.locale = flatpickr.l10ns.default;\n        }\n\n        return {\n            flatPickr: fpickr,\n            date: null,\n        };\n    },\n    mounted: function () {\n        // if value is not set but default date is, then emit proper string value to parent.\n        if (!this.value && this.flatPickr.defaultDate) {\n            if (this.flatPickr.defaultDate instanceof Date) {\n                this.$emit('setDefault', flatpickr.formatDate(this.config.defaultDate, this.config.dateFormat));\n            } else {\n                this.$emit('setDefault', this.flatPickr.defaultDate);\n            }\n        }\n    },\n    methods: {\n        onChange: function (date) {\n            this.$emit('onChange', flatpickr.formatDate(date[0], this.flatPickr.dateFormat));\n        },\n    },\n};\n","import atk from 'atk';\n\n/**\n * Wrapper for Fomantic-UI dropdown component into a lookup component.\n *\n * Props:\n * config:\n * url: the callback URL. Callback should return model data in form of { key: modelId, text: modelTitle, value: modelId }\n * reference: the reference field name associate with model or hasOne name. This field name will be sent along with URL callback parameter as of 'field=name'.\n * ui: the css class name to apply to dropdown.\n * Note: The remaining config object may contain any or sui-dropdown { props: value } pair.\n *\n * value: The selected value.\n * optionalValue: The initial list of options for the dropdown.\n */\n\nconst template = `<sui-dropdown\n                    ref=\"drop\"\n                    v-bind=\"dropdownProps\"\n                    :loading=\"isLoading\"\n                    @input=\"onChange\"\n                    @filtered=\"onFiltered\"\n                    v-model=\"current\"\n                    :class=\"css\"></sui-dropdown>`;\n\nexport default {\n    name: 'atk-lookup',\n    template: template,\n    props: ['config', 'value', 'optionalValue'],\n    data: function () {\n        const {\n            url, reference, ui, ...suiDropdown\n        } = this.config;\n        suiDropdown.selection = true;\n\n        return {\n            dropdownProps: suiDropdown,\n            current: this.value,\n            url: url || null,\n            css: [ui],\n            isLoading: false,\n            field: reference,\n            query: '',\n            temp: '',\n        };\n    },\n    mounted: function () {\n        if (this.optionalValue) {\n            this.dropdownProps.options = Array.isArray(this.optionalValue) ? this.optionalValue : [this.optionalValue];\n        }\n    },\n    methods: {\n        onChange: function (value) {\n            this.$emit('onChange', value);\n        },\n        /**\n         * Receive user input text for search.\n         */\n        onFiltered: function (inputValue) {\n            if (inputValue) {\n                this.isLoading = true;\n            }\n            this.temp = inputValue;\n            atk.debounce(() => {\n                if (this.query !== this.temp) {\n                    this.query = this.temp;\n                    if (this.query) {\n                        this.fetchItems(this.query);\n                    }\n                }\n            }, 300).call(this);\n        },\n        /**\n         * Fetch new data from server.\n         */\n        fetchItems: async function (q) {\n            try {\n                const data = { atkVueLookupQuery: q, atkVueLookupField: this.field };\n                const response = await atk.apiService.suiFetch(this.url, { method: 'get', data: data });\n                if (response.success) {\n                    this.dropdownProps.options = response.results;\n                }\n                this.isLoading = false;\n            } catch (e) {\n                console.error(e);\n                this.isLoading = false;\n            }\n        },\n    },\n};\n"],"names":["name","template","props","value","String","Number","data","text","this","methods","handleChange","event","$emit","target","components","multilineTextarea","atkDatePicker","atkLookup","fieldName","cellData","type","inputName","inputValue","fieldValue","getComponent","definition","component","getComponentProps","readOnlyValue","componentProps","onInput","getTypeValue","onChange","r","checked","columns","fields","isDeleteAll","onToggleDeleteAll","$nextTick","atk","$root","$el","id","isOn","$refs","check","getTextAlign","column","align","isEditable","getVisibleColumns","count","forEach","field","isVisible","hasError","Object","keys","errors","length","hasCaption","caption","getErrorMsg","rows","i","error","filter","col","msg","computed","isIndeterminate","state","isChecked","form","formName","rowData","fieldData","eventFields","deletables","hasChangeCb","tableProp","basic","celled","collapsing","stackable","inverted","tableProps","fieldDefs","created","multilineCell","toDelete","get","isDeletable","set","v","onTab","idx","getErrorState","e","getColumnWidth","fieldOptions","width","onEdit","isEditing","onToggleDelete","rowId","onUpdateValue","getValue","rowValues","default","onTabLastColumn","isDeletableRow","row","indexOf","__atkml","getError","multilineHeader","mounted","buildRowData","updateInputValue","payload","onUpdate","splice","push","onTabLastRow","isLimitReached","addOnTab","onAdd","newRow","createRow","afterAdd","tryParse","fetchExpression","fetchOnChangeAction","onDelete","atkmlId","deleteRow","afterDelete","updateFieldInRow","clearError","call","getUUID","findIndex","JSON","stringify","jsonValue","hasExpression","isExpr","$","addBtn","api","on","url","method","__atkml_action","postData","async","context","stateContext","console","findRow","resp","expressions","find","getInputElement","atkmlInput","replace","c","Math","floor","random","toString","getSpan","getDeletables","getMainToggleState","isDeleteDisable","rowLimit","useDefault","fpickr","config","defaultDate","Date","locale","flatpickr","l10ns","flatPickr","date","formatDate","dateFormat","reference","ui","suiDropdown","selection","dropdownProps","current","css","isLoading","query","temp","optionalValue","options","Array","isArray","onFiltered","fetchItems","q","atkVueLookupQuery","atkVueLookupField","response","success","results"],"sourceRoot":""}