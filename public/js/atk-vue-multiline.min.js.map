{"version":3,"file":"js/atk-vue-multiline.min.js","mappings":"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","sources":["webpack://atk/./src/vue-components/multiline/multiline-cell.component.js","webpack://atk/./src/vue-components/multiline/multiline-readonly.component.js","webpack://atk/./src/vue-components/multiline/multiline-textarea.component.js","webpack://atk/./src/vue-components/multiline/multiline-header.component.js","webpack://atk/./src/vue-components/multiline/multiline.component.js","webpack://atk/./src/vue-components/multiline/multiline-body.component.js","webpack://atk/./src/vue-components/multiline/multiline-row.component.js","webpack://atk/./src/vue-components/share/atk-date-picker.js","webpack://atk/./src/vue-components/share/atk-lookup.js"],"sourcesContent":["import multilineReadonly from './multiline-readonly.component';\nimport multilineTextarea from './multiline-textarea.component';\nimport atkDatePicker from '../share/atk-date-picker';\nimport atkLookup from '../share/atk-lookup';\n\nexport default {\n    name: 'AtkMultilineCell',\n    template: `\n        <component\n            :is=\"getComponent()\"\n            v-bind=\"getComponentProps()\"\n            ref=\"cell\"\n            :fluid=\"true\"\n            class=\"fluid\"\n            @update:modelValue=\"onInput\"\n            v-model=\"inputValue\"\n            :name=\"inputName\"\n        ></component>`,\n    components: {\n        AtkMultilineReadonly: multilineReadonly,\n        AtkMultilineTextarea: multilineTextarea,\n        AtkDatePicker: atkDatePicker,\n        AtkLookup: atkLookup,\n    },\n    props: ['cellData', 'fieldValue'],\n    data: function () {\n        return {\n            fieldName: this.cellData.name,\n            type: this.cellData.type,\n            inputName: '-' + this.cellData.name,\n            inputValue: this.fieldValue,\n        };\n    },\n    emits: ['update-value'],\n    methods: {\n        getComponent: function () {\n            return this.cellData.definition.component;\n        },\n        getComponentProps: function () {\n            if (this.getComponent() === 'AtkMultilineReadonly') {\n                return { readOnlyValue: this.fieldValue };\n            }\n\n            return this.cellData.definition.componentProps;\n        },\n        onInput: function (value) {\n            this.inputValue = value;\n            this.$emit('update-value', this.fieldName, this.inputValue);\n        },\n    },\n};\n","/**\n * Simply display a readonly value.\n */\nexport default {\n    name: 'AtkMultilineReadonly',\n    template: '<div>{{readOnlyValue}}</div>',\n    props: ['readOnlyValue'],\n};\n","export default {\n    name: 'AtkMultilineTextarea',\n    template: '<textarea v-model=\"modelValue\" @input=\"onInput\" />',\n    props: ['modelValue'],\n    emits: ['update:modelValue'],\n    methods: {\n        onInput: function (event) {\n            this.$emit('update:modelValue', event.target.value);\n        },\n    },\n};\n","import atk from 'atk';\n\nexport default {\n    name: 'AtkMultilineHeader',\n    template: `\n        <SuiTableHeader>\n            <SuiTableRow v-if=\"hasError()\">\n                <SuiTableCell :style=\"{ background: 'none' }\" />\n                <SuiTableCell :style=\"{ background: 'none' }\"\n                    state=\"error\"\n                    v-for=\"column in columns\"\n                    :textAlign=\"getTextAlign(column)\"\n                >\n                    <SuiIcon v-if=\"getErrorMsg(column)\" name=\"attention\" />\n                    {{getErrorMsg(column)}}\n                </SuiTableCell>\n            </SuiTableRow>\n            <SuiTableRow v-if=\"hasCaption()\">\n                <SuiTableHeaderCell :colspan=\"getVisibleColumns()\">{{caption}}</SuiTableHeaderCell>\n            </SuiTableRow>\n            <SuiTableRow :verticalAlign=\"'top'\">\n                <SuiTableHeaderCell :width=1 textAlign=\"center\">\n                    <input ref=\"check\" type=\"checkbox\" @input=\"onToggleDeleteAll\" :checked=\"isChecked\" :indeterminate=\"isIndeterminate\" />\n                </SuiTableHeaderCell>\n                <SuiTableHeaderCell\n                    v-for=\"column in columns\"\n                    :width=column.cellProps.width\n                    :textAlign=\"getTextAlign(column)\"\n                >\n                    <div>{{column.caption}}</div>\n                    <div v-if=\"false\" :style=\"{ position: 'absolute', top: '-22px' }\">\n                        <SuiLabel v-if=\"getErrorMsg(column)\" pointing=\"below\" basic color=\"red\">{{getErrorMsg(column)}}</SuiLabel>\n                    </div>\n                </SuiTableHeaderCell>\n            </SuiTableRow>\n        </SuiTableHeader>`,\n    props: ['fields', 'state', 'errors', 'caption'],\n    data: function () {\n        return { columns: this.fields, isDeleteAll: false };\n    },\n    methods: {\n        onToggleDeleteAll: function () {\n            this.$nextTick(() => {\n                atk.eventBus.emit(this.$root.$el.id + '-toggle-delete-all', { isOn: this.$refs.check.checked });\n            });\n        },\n        getTextAlign: function (column) {\n            let align = 'left';\n            if (!column.isEditable) {\n                switch (column.type) {\n                    case 'integer':\n                    case 'float':\n                    case 'atk4_money':\n                        align = 'right';\n\n                        break;\n                }\n            }\n\n            return align;\n        },\n        getVisibleColumns: function () {\n            let count = 1; // add deletable column;\n            this.columns.forEach((field) => {\n                count = field.isVisible ? count + 1 : count;\n            });\n\n            return count;\n        },\n        hasError: function () {\n            return Object.keys(this.errors).length > 0;\n        },\n        hasCaption: function () {\n            return this.caption;\n        },\n        getErrorMsg: function (column) {\n            if (this.hasError()) {\n                const rows = Object.keys(this.errors);\n                for (let i = 0; i < rows.length; i++) {\n                    const error = this.errors[rows[i]].filter((col) => col.name === column.name);\n                    if (error.length > 0) {\n                        return error[0].msg;\n                    }\n                }\n            }\n\n            return null;\n        },\n    },\n    computed: {\n        isIndeterminate: function () {\n            return this.state === 'indeterminate';\n        },\n        isChecked: function () {\n            return this.state === 'on';\n        },\n    },\n};\n","import $ from 'external/jquery';\nimport atk from 'atk';\nimport multilineBody from './multiline-body.component';\nimport multilineHeader from './multiline-header.component';\n\nexport default {\n    name: 'AtkMultiline',\n    template: `\n        <div>\n            <SuiTable v-bind=\"tableProp\">\n                <AtkMultilineHeader\n                    :fields=\"fieldData\"\n                    :state=\"getMainToggleState\"\n                    :errors=\"errors\"\n                    :caption=\"caption\"\n                ></AtkMultilineHeader>\n                <AtkMultilineBody\n                    @onTabLastRow=\"onTabLastRow\"\n                    :fieldDefs=\"fieldData\"\n                    :rowData=\"rowData\"\n                    :deletables=\"getDeletables\"\n                    :errors=\"errors\"\n                ></AtkMultilineBody>\n                <SuiTableFooter>\n                    <SuiTableRow>\n                        <SuiTableHeaderCell />\n                        <SuiTableHeaderCell :colspan=\"getSpan\" textAlign=\"right\">\n                            <SuiButtonGroup>\n                                <SuiButton ref=\"addBtn\" size=\"small\" @click.stop.prevent=\"onAdd\" type=\"button\" icon :disabled=\"isLimitReached\">\n                                    <SuiIcon name=\"plus\" />\n                                </SuiButton>\n                                <SuiButton size=\"small\" @click.stop.prevent=\"onDelete\" type=\"button\" icon :disabled=\"isDeleteDisable\">\n                                    <SuiIcon name=\"trash\" />\n                                </SuiButton>\n                            </SuiButtonGroup>\n                        </SuiTableHeaderCell>\n                    </SuiTableRow>\n                </SuiTableFooter>\n            </SuiTable>\n            <div>\n                <input ref=\"atkmlInput\" :form=\"form\" :name=\"name\" type=\"hidden\" :value=\"value\" />\n            </div>\n        </div>`,\n    props: {\n        data: Object,\n    },\n    data: function () {\n        const tableDefault = {\n            basic: false,\n            celled: false,\n            collapsing: false,\n            stackable: false,\n            inverted: false,\n        };\n\n        return {\n            form: this.data.formName,\n            value: this.data.inputValue,\n            name: this.data.inputName, // form input name where to set multiline content value.\n            rowData: [],\n            fieldData: this.data.fields || [],\n            eventFields: this.data.eventFields || [],\n            deletables: [],\n            hasChangeCb: this.data.hasChangeCb,\n            errors: {},\n            caption: this.data.caption || null,\n            tableProp: { ...tableDefault, ...this.data.tableProps || {} },\n        };\n    },\n    components: {\n        AtkMultilineHeader: multilineHeader,\n        AtkMultilineBody: multilineBody,\n    },\n    mounted: function () {\n        this.rowData = this.buildRowData(this.value ? this.value : '[]');\n        this.updateInputValue();\n\n        atk.eventBus.on(this.$root.$el.id + '-update-row', (payload) => {\n            this.onUpdate(payload.rowId, payload.fieldName, payload.value);\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-toggle-delete', (payload) => {\n            const i = this.deletables.indexOf(payload.rowId);\n            if (i !== -1) {\n                this.deletables.splice(i, 1);\n            } else {\n                this.deletables.push(payload.rowId);\n            }\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-toggle-delete-all', (payload) => {\n            this.deletables = [];\n            if (payload.isOn) {\n                this.rowData.forEach((row) => {\n                    this.deletables.push(row.__atkml);\n                });\n            }\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-multiline-rows-error', (payload) => {\n            this.errors = { ...payload.errors };\n        });\n    },\n    methods: {\n        onTabLastRow: function () {\n            if (!this.isLimitReached && this.data.addOnTab) {\n                this.onAdd();\n            }\n        },\n        onAdd: function () {\n            const newRow = this.createRow(this.data.fields);\n            this.rowData.push(newRow);\n            this.updateInputValue();\n            if (this.data.afterAdd && typeof this.data.afterAdd === 'function') {\n                this.data.afterAdd(JSON.parse(this.value));\n            }\n            this.fetchExpression(newRow.__atkml);\n            this.fetchOnChangeAction();\n        },\n        onDelete: function () {\n            this.deletables.forEach((atkmlId) => {\n                this.deleteRow(atkmlId);\n            });\n            this.deletables = [];\n            this.updateInputValue();\n            this.fetchOnChangeAction();\n            if (this.data.afterDelete && typeof this.data.afterDelete === 'function') {\n                this.data.afterDelete(JSON.parse(this.value));\n            }\n        },\n        onUpdate: function (atkmlId, fieldName, value) {\n            this.updateFieldInRow(atkmlId, fieldName, value);\n            this.clearError(atkmlId, fieldName);\n            this.updateInputValue();\n\n            if (!this.onUpdate.debouncedFx) {\n                this.onUpdate.debouncedFx = atk.createDebouncedFx(() => {\n                    this.onUpdate.debouncedFx = null;\n                    this.fetchExpression(atkmlId);\n                    this.fetchOnChangeAction(fieldName);\n                }, 250);\n            }\n            this.onUpdate.debouncedFx.call(this);\n        },\n        /**\n         * Creates a new row of data and\n         * set values to default if available.\n         */\n        createRow: function (fields) {\n            const row = {};\n            fields.forEach((field) => {\n                row[field.name] = field.default;\n            });\n            row.__atkml = this.getUUID();\n\n            return row;\n        },\n        deleteRow: function (atkmlId) {\n            this.rowData.splice(this.rowData.findIndex((row) => row.__atkml === atkmlId), 1);\n            delete this.errors[atkmlId];\n        },\n        /**\n         * Update the value of the field in rowData.\n         */\n        updateFieldInRow: function (atkmlId, fieldName, value) {\n            this.rowData.forEach((row) => {\n                if (row.__atkml === atkmlId) {\n                    row[fieldName] = value;\n                }\n            });\n        },\n        clearError: function (atkmlId, fieldName) {\n            if (atkmlId in this.errors) {\n                const errors = this.errors[atkmlId].filter((error) => error.name !== fieldName);\n                this.errors[atkmlId] = [...errors];\n                if (errors.length === 0) {\n                    delete this.errors[atkmlId];\n                }\n            }\n        },\n        /**\n         * Update Multi-line Form input with all rowData values\n         * as JSON string.\n         */\n        updateInputValue: function () {\n            this.value = JSON.stringify(this.rowData);\n        },\n        /**\n         * Build rowData from JSON string.\n         */\n        buildRowData: function (jsonValue) {\n            const rows = JSON.parse(jsonValue);\n            rows.forEach((row) => {\n                row.__atkml = this.getUUID();\n            });\n\n            return rows;\n        },\n        /**\n         * Check if one of the field use expression.\n         */\n        hasExpression: function () {\n            return this.fieldData.filter((field) => field.isExpr).length > 0;\n        },\n        /**\n         * Send on change action to server.\n         * Use regular api call in order\n         * for return js to be fully evaluated.\n         */\n        fetchOnChangeAction: function (fieldName = null) {\n            if (this.hasChangeCb && (fieldName === null || this.eventFields.indexOf(fieldName) !== -1)) {\n                $(this.$refs.addBtn.$el).api({\n                    on: 'now',\n                    url: this.data.url,\n                    method: 'POST',\n                    data: { __atkml_action: 'on-change', rows: this.value },\n                });\n            }\n        },\n        postData: async function (row) {\n            const data = { ...row };\n            const context = this.$refs.addBtn.$el;\n            data.__atkml_action = 'update-row';\n            try {\n                return await atk.apiService.suiFetch(this.data.url, { data: data, method: 'POST', stateContext: context });\n            } catch (e) {\n                console.error(e);\n            }\n        },\n        /**\n         * Get expressions values from server.\n         */\n        fetchExpression: async function (atkmlId) {\n            if (this.hasExpression()) {\n                const row = this.findRow(atkmlId);\n                // server will return expression field - value if define.\n                if (row) {\n                    const resp = await this.postData(row);\n                    if (resp.expressions) {\n                        const fields = Object.keys(resp.expressions);\n                        fields.forEach((field) => {\n                            this.updateFieldInRow(atkmlId, field, resp.expressions[field]);\n                        });\n                        this.updateInputValue();\n                    }\n                }\n            }\n        },\n        findRow: function (atkmlId) {\n            return this.rowData.find((row) => row.__atkml === atkmlId);\n        },\n        getInputElement: function () {\n            return this.$refs.atkmlInput;\n        },\n        /**\n         * UUID v4 generator.\n         */\n        getUUID: function () {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n                const r = Math.floor(Math.random() * 16);\n                const v = c === 'x' ? r : (r & (0x3 | 0x8)); // eslint-disable-line no-bitwise\n\n                return v.toString(16);\n            });\n        },\n    },\n    computed: {\n        getSpan: function () {\n            return this.fieldData.length - 1;\n        },\n        getDeletables: function () {\n            return this.deletables;\n        },\n        /**\n         * Return Delete all checkbox state base on\n         * deletables entries.\n         */\n        getMainToggleState: function () {\n            let state = 'off';\n            if (this.deletables.length > 0) {\n                if (this.deletables.length === this.rowData.length) {\n                    state = 'on';\n                } else {\n                    state = 'indeterminate';\n                }\n            }\n\n            return state;\n        },\n        isDeleteDisable: function () {\n            return !this.deletables.length > 0;\n        },\n        isLimitReached: function () {\n            if (this.data.rowLimit === 0) {\n                return false;\n            }\n\n            return this.data.rowLimit < this.rowData.length + 1;\n        },\n    },\n};\n","import multilineRow from './multiline-row.component';\n\nexport default {\n    name: 'AtkMultilineBody',\n    template: `\n        <SuiTableBody>\n            <AtkMultilineRow\n                :fields=\"fields\"\n                v-for=\"(row, i) in rows\" :key=\"row.__atkml\"\n                @onTabLastColumn=\"onTabLastColumn(i)\"\n                :rowId=\"row.__atkml\"\n                :isDeletable=\"isDeletableRow(row)\"\n                :rowValues=\"row\"\n                :error=\"getError(row.__atkml)\"\n            ></AtkMultilineRow>\n        </SuiTableBody>`,\n    props: ['fieldDefs', 'rowData', 'deletables', 'errors'],\n    data: function () {\n        return { fields: this.fieldDefs };\n    },\n    created: function () {\n    },\n    components: {\n        AtkMultilineRow: multilineRow,\n    },\n    computed: {\n        rows: function () {\n            return this.rowData;\n        },\n    },\n    emits: ['onTabLastRow'],\n    methods: {\n        onTabLastColumn: function (rowIndex) {\n            if (rowIndex + 1 === this.rowData.length) {\n                this.$emit('onTabLastRow');\n            }\n        },\n        isDeletableRow: function (row) {\n            return this.deletables.indexOf(row.__atkml) !== -1;\n        },\n        getError: function (rowId) {\n            if (rowId in this.errors) {\n                return this.errors[rowId];\n            }\n\n            return null;\n        },\n    },\n};\n","import atk from 'atk';\nimport multilineCell from './multiline-cell.component';\n\n/**\n * This will create a table td element using SuiTableCell.\n * The td element is created only if column as set isVisible = true;\n * The td element will add a multiline cell element.\n * the multiline cell will set it's own template component depending on the fieldType.\n * getValue\n */\nexport default {\n    name: 'AtkMultilineRow',\n    template: `\n        <SuiTableRow :verticalAlign=\"'middle'\">\n            <SuiTableCell textAlign=\"center\">\n                <input type=\"checkbox\" @input=\"onToggleDelete\" v-model=\"toDelete\" />\n            </SuiTableCell>\n            <SuiTableCell\n                v-for=\"(column, i) in columns\"\n                @keydown.tab=\"onTab(i)\"\n                v-bind=\"column.cellProps\"\n                :width=null\n                :state=\"getErrorState(column)\"\n                :style=\"{ overflow: 'visible' }\"\n            >\n                <AtkMultilineCell\n                    :cellData=\"column\"\n                    @update-value=\"onUpdateValue\"\n                    :fieldValue=\"getValue(column)\"\n                ></AtkMultilineCell>\n            </SuiTableCell>\n        </SuiTableRow>`,\n    props: ['fields', 'rowId', 'isDeletable', 'rowValues', 'error'],\n    data: function () {\n        return { columns: this.fields };\n    },\n    components: {\n        AtkMultilineCell: multilineCell,\n    },\n    computed: {\n        /**\n         * toDelete is bind by v-model, thus we need a setter for\n         * computed property to work.\n         * When isDeletable is pass, will set checkbox according to it's value.\n         */\n        toDelete: {\n            get: function () {\n                return this.isDeletable;\n            },\n            set: function (v) {\n                return v;\n            },\n        },\n    },\n    emits: ['onTabLastColumn'],\n    methods: {\n        onTab: function (columnIndex) {\n            if (columnIndex === this.columns.filter((column) => column.isEditable).length) {\n                this.$emit('onTabLastColumn');\n            }\n        },\n        getErrorState: function (column) {\n            if (this.error) {\n                const error = this.error.filter((e) => column.name === e.name);\n                if (error.length > 0) {\n                    return 'error';\n                }\n            }\n\n            return null;\n        },\n        getColumnWidth: function (column) {\n            return column.fieldOptions ? column.fieldOptions.width : null;\n        },\n        onEdit: function () {\n            this.isEditing = true;\n        },\n        onToggleDelete: function (e) {\n            atk.eventBus.emit(this.$root.$el.id + '-toggle-delete', { rowId: this.rowId });\n        },\n        onUpdateValue: function (fieldName, value) {\n            atk.eventBus.emit(this.$root.$el.id + '-update-row', { rowId: this.rowId, fieldName: fieldName, value: value });\n        },\n        getValue: function (column) {\n            return this.rowValues[column.name] || column.default;\n        },\n    },\n};\n","/* global flatpickr */ // loaded after main JS\n\n/**\n * Wrapper for vue-flatpickr-component component.\n * https://github.com/ankurk91/vue-flatpickr-component\n *\n * Properties:\n * config: Any of flatpickr options\n *\n * Will emit a dateChange event when date is set.\n */\nexport default {\n    name: 'AtkDatePicker',\n    template: '<FlatpickrPicker v-model=\"date\" :config=\"flatPickr\" />',\n    props: ['config', 'value'],\n    data: function () {\n        const { useDefault, ...fpickr } = this.config;\n\n        if (useDefault && !fpickr.defaultDate && !this.value) {\n            fpickr.defaultDate = new Date();\n        } else if (this.value) {\n            fpickr.defaultDate = this.value;\n        }\n\n        if (!fpickr.locale) {\n            fpickr.locale = flatpickr.l10ns.default;\n        }\n\n        return {\n            flatPickr: fpickr,\n            date: null,\n        };\n    },\n    emits: ['setDefault'],\n    mounted: function () {\n        // if value is not set but default date is, then emit proper string value to parent.\n        if (!this.value && this.flatPickr.defaultDate) {\n            if (this.flatPickr.defaultDate instanceof Date) {\n                this.$emit('setDefault', flatpickr.formatDate(this.config.defaultDate, this.config.dateFormat));\n            } else {\n                this.$emit('setDefault', this.flatPickr.defaultDate);\n            }\n        }\n    },\n};\n","import atk from 'atk';\n\n/**\n * Wrapper for Fomantic-UI dropdown component into a lookup component.\n *\n * Properties:\n * config:\n * url: the callback URL. Callback should return model data in form of { key: modelId, text: modelTitle, value: modelId }\n * reference: the reference field name associate with model or hasOne name. This field name will be sent along with URL callback parameter as of 'field=name'.\n * ui: the css class name to apply to dropdown.\n * Note: The remaining config object may contain any or SuiDropdown { props: value } pair.\n *\n * value: The selected value.\n * optionalValue: The initial list of options for the dropdown.\n */\nexport default {\n    name: 'AtkLookup',\n    template: `\n        <SuiDropdown\n            v-bind=\"dropdownProps\"\n            ref=\"drop\"\n            ` /* :loading=\"isLoading\" */\n            + `@update:modelValue=\"onChange\"\n            @filtered=\"onFiltered\"\n            v-model=\"current\"\n            :class=\"css\"\n        ></SuiDropdown>`,\n    props: ['config', 'value', 'optionalValue'],\n    data: function () {\n        const {\n            url, reference, ui, ...suiDropdown\n        } = this.config;\n        suiDropdown.selection = true;\n\n        return {\n            dropdownProps: suiDropdown,\n            current: this.value,\n            url: url || null,\n            css: [ui],\n            isLoading: false,\n            field: reference,\n            query: '',\n            temp: '',\n        };\n    },\n    mounted: function () {\n        if (this.optionalValue) {\n            this.dropdownProps.options = Array.isArray(this.optionalValue) ? this.optionalValue : [this.optionalValue];\n        }\n    },\n    emits: ['update:modelValue'],\n    methods: {\n        onChange: function (value) {\n            this.current = value.value;\n            this.$emit('update:modelValue', this.current);\n        },\n        /**\n         * Receive user input text for search.\n         */\n        onFiltered: function (inputValue) {\n            if (inputValue) {\n                this.isLoading = true;\n            }\n\n            if (!this.onFiltered.debouncedFx) {\n                this.onFiltered.debouncedFx = atk.createDebouncedFx(() => {\n                    this.onFiltered.debouncedFx = null;\n                    if (this.query !== this.temp) {\n                        this.query = this.temp;\n                        if (this.query) {\n                            this.fetchItems(this.query);\n                        }\n                    }\n                }, 250);\n            }\n            this.temp = inputValue;\n            this.onFiltered.debouncedFx(this);\n        },\n        /**\n         * Fetch new data from server.\n         */\n        fetchItems: async function (q) {\n            try {\n                const data = { atkVueLookupQuery: q, atkVueLookupField: this.field };\n                const response = await atk.apiService.suiFetch(this.url, { method: 'get', data: data });\n                if (response.success) {\n                    this.dropdownProps.options = response.results;\n                }\n            } catch (e) {\n                console.error(e);\n            } finally {\n                this.isLoading = false;\n            }\n        },\n    },\n};\n"],"names":["name","template","components","AtkMultilineReadonly","props","AtkMultilineTextarea","emits","methods","onInput","event","this","$emit","target","value","AtkDatePicker","atkDatePicker","AtkLookup","atkLookup","data","fieldName","cellData","type","inputName","inputValue","fieldValue","getComponent","definition","component","getComponentProps","readOnlyValue","componentProps","columns","fields","isDeleteAll","onToggleDeleteAll","$nextTick","atk","$root","$el","id","isOn","$refs","check","checked","getTextAlign","column","align","isEditable","getVisibleColumns","count","forEach","field","isVisible","hasError","Object","keys","errors","length","hasCaption","caption","getErrorMsg","rows","i","error","filter","col","msg","computed","isIndeterminate","state","isChecked","form","formName","rowData","fieldData","eventFields","deletables","hasChangeCb","tableProp","basic","celled","collapsing","stackable","inverted","tableProps","AtkMultilineHeader","multilineHeader","AtkMultilineBody","fieldDefs","created","AtkMultilineRow","AtkMultilineCell","multilineCell","toDelete","get","isDeletable","set","v","onTab","columnIndex","getErrorState","e","getColumnWidth","fieldOptions","width","onEdit","isEditing","onToggleDelete","rowId","onUpdateValue","getValue","rowValues","default","onTabLastColumn","rowIndex","isDeletableRow","row","indexOf","__atkml","getError","mounted","buildRowData","updateInputValue","payload","onUpdate","splice","push","onTabLastRow","isLimitReached","addOnTab","onAdd","newRow","createRow","afterAdd","JSON","parse","fetchExpression","fetchOnChangeAction","onDelete","atkmlId","deleteRow","afterDelete","updateFieldInRow","clearError","debouncedFx","call","getUUID","findIndex","stringify","jsonValue","hasExpression","isExpr","$","addBtn","api","on","url","method","__atkml_action","postData","async","context","stateContext","console","findRow","resp","expressions","find","getInputElement","atkmlInput","replace","c","r","Math","floor","random","toString","getSpan","getDeletables","getMainToggleState","isDeleteDisable","rowLimit","useDefault","fpickr","config","defaultDate","Date","locale","flatpickr","l10ns","flatPickr","date","formatDate","dateFormat","reference","ui","suiDropdown","selection","dropdownProps","current","css","isLoading","query","temp","optionalValue","options","Array","isArray","onChange","onFiltered","fetchItems","q","atkVueLookupQuery","atkVueLookupField","response","success","results"],"sourceRoot":""}