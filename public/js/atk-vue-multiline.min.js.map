{"version":3,"file":"js/atk-vue-multiline.min.js","mappings":"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","sources":["webpack://atk/./src/vue-components/multiline/multiline-cell.component.js","webpack://atk/./src/vue-components/multiline/multiline-readonly.component.js","webpack://atk/./src/vue-components/multiline/multiline-textarea.component.js","webpack://atk/./src/vue-components/multiline/multiline-header.component.js","webpack://atk/./src/vue-components/multiline/multiline.component.js","webpack://atk/./src/vue-components/multiline/multiline-body.component.js","webpack://atk/./src/vue-components/multiline/multiline-row.component.js","webpack://atk/./src/vue-components/share/atk-date-picker.js","webpack://atk/./src/vue-components/share/atk-lookup.js"],"sourcesContent":["import multilineReadonly from './multiline-readonly.component';\nimport multilineTextarea from './multiline-textarea.component';\nimport atkDatePicker from '../share/atk-date-picker';\nimport atkLookup from '../share/atk-lookup';\n\nexport default {\n    name: 'atk-multiline-cell',\n    template: `\n        <component\n            :is=\"getComponent()\"\n            v-bind=\"getComponentProps()\"\n            ref=\"cell\"\n            :fluid=\"true\"\n            class=\"fluid\"\n            @update:modelValue=\"onInput\"\n            v-model=\"inputValue\"\n            :name=\"inputName\"\n        ></component>`,\n    components: {\n        'atk-multiline-readonly': multilineReadonly,\n        'atk-multiline-textarea': multilineTextarea,\n        'atk-date-picker': atkDatePicker,\n        'atk-lookup': atkLookup,\n    },\n    props: ['cellData', 'fieldValue'],\n    data: function () {\n        return {\n            fieldName: this.cellData.name,\n            type: this.cellData.type,\n            inputName: '-' + this.cellData.name,\n            inputValue: this.fieldValue,\n        };\n    },\n    emits: ['update-value'],\n    methods: {\n        getComponent: function () {\n            return this.cellData.definition.component;\n        },\n        getComponentProps: function () {\n            if (this.getComponent() === 'atk-multiline-readonly') {\n                return { readOnlyValue: this.fieldValue };\n            }\n\n            return this.cellData.definition.componentProps;\n        },\n        onInput: function (value) {\n            this.inputValue = value;\n            this.$emit('update-value', this.fieldName, this.inputValue);\n        },\n    },\n};\n","/**\n * Simply display a readonly value.\n */\nexport default {\n    name: 'atk-multiline-readonly',\n    template: '<div>{{readOnlyValue}}</div>',\n    props: ['readOnlyValue'],\n};\n","export default {\n    name: 'atk-multiline-textarea',\n    template: '<textarea v-model=\"modelValue\" @input=\"onInput\"></textarea>',\n    props: ['modelValue'],\n    emits: ['update:modelValue'],\n    methods: {\n        onInput: function (event) {\n            this.$emit('update:modelValue', event.target.value);\n        },\n    },\n};\n","import atk from 'atk';\n\nexport default {\n    name: 'atk-multiline-header',\n    template: `\n        <sui-table-header>\n            <sui-table-row v-if=\"hasError()\">\n                <sui-table-cell :style=\"{ background: 'none' }\"></sui-table-cell>\n                <sui-table-cell :style=\"{ background: 'none' }\"\n                    state=\"error\"\n                    v-for=\"column in columns\"\n                    :textAlign=\"getTextAlign(column)\"\n                >\n                    <sui-icon v-if=\"getErrorMsg(column)\" name=\"attention\"></sui-icon>\n                    {{getErrorMsg(column)}}\n                </sui-table-cell>\n            </sui-table-row>\n            <sui-table-row v-if=\"hasCaption()\">\n                <sui-table-header-cell :colspan=\"getVisibleColumns()\">{{caption}}</sui-table-header-cell>\n            </sui-table-row>\n            <sui-table-row :verticalAlign=\"'top'\">\n                <sui-table-header-cell :width=1 textAlign=\"center\">\n                    <input ref=\"check\" type=\"checkbox\" @input=\"onToggleDeleteAll\" :checked=\"isChecked\" :indeterminate=\"isIndeterminate\" />\n                </sui-table-header-cell>\n                <sui-table-header-cell\n                    v-for=\"column in columns\"\n                    :width=column.cellProps.width\n                    :textAlign=\"getTextAlign(column)\"\n                >\n                    <div>{{column.caption}}</div>\n                    <div v-if=\"false\" :style=\"{ position: 'absolute', top: '-22px' }\">\n                        <sui-label v-if=\"getErrorMsg(column)\" pointing=\"below\" basic color=\"red\">{{getErrorMsg(column)}}</sui-label>\n                    </div>\n                </sui-table-header-cell>\n            </sui-table-row>\n        </sui-table-header>`,\n    props: ['fields', 'state', 'errors', 'caption'],\n    data: function () {\n        return { columns: this.fields, isDeleteAll: false };\n    },\n    methods: {\n        onToggleDeleteAll: function () {\n            this.$nextTick(() => {\n                atk.eventBus.emit(this.$root.$el.id + '-toggle-delete-all', { isOn: this.$refs.check.checked });\n            });\n        },\n        getTextAlign: function (column) {\n            let align = 'left';\n            if (!column.isEditable) {\n                switch (column.type) {\n                    case 'integer':\n                    case 'float':\n                    case 'atk4_money':\n                        align = 'right';\n\n                        break;\n                }\n            }\n\n            return align;\n        },\n        getVisibleColumns: function () {\n            let count = 1; // add deletable column;\n            this.columns.forEach((field) => {\n                count = field.isVisible ? count + 1 : count;\n            });\n\n            return count;\n        },\n        hasError: function () {\n            return Object.keys(this.errors).length > 0;\n        },\n        hasCaption: function () {\n            return this.caption;\n        },\n        getErrorMsg: function (column) {\n            if (this.hasError()) {\n                const rows = Object.keys(this.errors);\n                for (let i = 0; i < rows.length; i++) {\n                    const error = this.errors[rows[i]].filter((col) => col.name === column.name);\n                    if (error.length > 0) {\n                        return error[0].msg;\n                    }\n                }\n            }\n\n            return null;\n        },\n    },\n    computed: {\n        isIndeterminate: function () {\n            return this.state === 'indeterminate';\n        },\n        isChecked: function () {\n            return this.state === 'on';\n        },\n    },\n};\n","import $ from 'external/jquery';\nimport atk from 'atk';\nimport multilineBody from './multiline-body.component';\nimport multilineHeader from './multiline-header.component';\n\nexport default {\n    name: 'atk-multiline',\n    template: `\n        <div>\n            <sui-table v-bind=\"tableProp\">\n                <atk-multiline-header\n                    :fields=\"fieldData\"\n                    :state=\"getMainToggleState\"\n                    :errors=\"errors\"\n                    :caption=\"caption\"\n                ></atk-multiline-header>\n                <atk-multiline-body\n                    @onTabLastRow=\"onTabLastRow\"\n                    :fieldDefs=\"fieldData\"\n                    :rowData=\"rowData\"\n                    :deletables=\"getDeletables\"\n                    :errors=\"errors\"\n                ></atk-multiline-body>\n                <sui-table-footer>\n                    <sui-table-row>\n                        <sui-table-header-cell></sui-table-header-cell>\n                        <sui-table-header-cell :colspan=\"getSpan\" textAlign=\"right\">\n                            <div is=\"vue:sui-button-group\">\n                                <sui-button ref=\"addBtn\" size=\"small\" @click.stop.prevent=\"onAdd\" type=\"button\" icon :disabled=\"isLimitReached\">\n                                    <sui-icon name=\"plus\"></sui-icon>\n                                </sui-button>\n                                <sui-button size=\"small\" @click.stop.prevent=\"onDelete\" type=\"button\" icon :disabled=\"isDeleteDisable\">\n                                    <sui-icon name=\"trash\"></sui-icon>\n                                </sui-button>\n                            </div>\n                        </sui-table-header-cell>\n                    </sui-table-row>\n                </sui-table-footer>\n            </sui-table>\n            <div>\n                <input ref=\"atkmlInput\" :form=\"form\" :name=\"name\" type=\"hidden\" :value=\"value\" />\n            </div>\n        </div>`,\n    props: {\n        data: Object,\n    },\n    data: function () {\n        const tableDefault = {\n            basic: false,\n            celled: false,\n            collapsing: false,\n            stackable: false,\n            inverted: false,\n        };\n\n        return {\n            form: this.data.formName,\n            value: this.data.inputValue,\n            name: this.data.inputName, // form input name where to set multiline content value.\n            rowData: [],\n            fieldData: this.data.fields || [],\n            eventFields: this.data.eventFields || [],\n            deletables: [],\n            hasChangeCb: this.data.hasChangeCb,\n            errors: {},\n            caption: this.data.caption || null,\n            tableProp: { ...tableDefault, ...this.data.tableProps || {} },\n        };\n    },\n    components: {\n        'atk-multiline-body': multilineBody,\n        'atk-multiline-header': multilineHeader,\n    },\n    mounted: function () {\n        this.rowData = this.buildRowData(this.value ? this.value : '[]');\n        this.updateInputValue();\n\n        atk.eventBus.on(this.$root.$el.id + '-update-row', (payload) => {\n            this.onUpdate(payload.rowId, payload.fieldName, payload.value);\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-toggle-delete', (payload) => {\n            const i = this.deletables.indexOf(payload.rowId);\n            if (i !== -1) {\n                this.deletables.splice(i, 1);\n            } else {\n                this.deletables.push(payload.rowId);\n            }\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-toggle-delete-all', (payload) => {\n            this.deletables = [];\n            if (payload.isOn) {\n                this.rowData.forEach((row) => {\n                    this.deletables.push(row.__atkml);\n                });\n            }\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-multiline-rows-error', (payload) => {\n            this.errors = { ...payload.errors };\n        });\n    },\n    methods: {\n        onTabLastRow: function () {\n            if (!this.isLimitReached && this.data.addOnTab) {\n                this.onAdd();\n            }\n        },\n        onAdd: function () {\n            const newRow = this.createRow(this.data.fields);\n            this.rowData.push(newRow);\n            this.updateInputValue();\n            if (this.data.afterAdd && typeof this.data.afterAdd === 'function') {\n                this.data.afterAdd(JSON.parse(this.value));\n            }\n            this.fetchExpression(newRow.__atkml);\n            this.fetchOnChangeAction();\n        },\n        onDelete: function () {\n            this.deletables.forEach((atkmlId) => {\n                this.deleteRow(atkmlId);\n            });\n            this.deletables = [];\n            this.updateInputValue();\n            this.fetchOnChangeAction();\n            if (this.data.afterDelete && typeof this.data.afterDelete === 'function') {\n                this.data.afterDelete(JSON.parse(this.value));\n            }\n        },\n        onUpdate: function (atkmlId, fieldName, value) {\n            this.updateFieldInRow(atkmlId, fieldName, value);\n            this.clearError(atkmlId, fieldName);\n            this.updateInputValue();\n\n            if (!this.onUpdate.debouncedFx) {\n                this.onUpdate.debouncedFx = atk.createDebouncedFx(() => {\n                    this.onUpdate.debouncedFx = null;\n                    this.fetchExpression(atkmlId);\n                    this.fetchOnChangeAction(fieldName);\n                }, 250);\n            }\n            this.onUpdate.debouncedFx.call(this);\n        },\n        /**\n         * Creates a new row of data and\n         * set values to default if available.\n         */\n        createRow: function (fields) {\n            const row = {};\n            fields.forEach((field) => {\n                row[field.name] = field.default;\n            });\n            row.__atkml = this.getUUID();\n\n            return row;\n        },\n        deleteRow: function (atkmlId) {\n            this.rowData.splice(this.rowData.findIndex((row) => row.__atkml === atkmlId), 1);\n            delete this.errors[atkmlId];\n        },\n        /**\n         * Update the value of the field in rowData.\n         */\n        updateFieldInRow: function (atkmlId, fieldName, value) {\n            this.rowData.forEach((row) => {\n                if (row.__atkml === atkmlId) {\n                    row[fieldName] = value;\n                }\n            });\n        },\n        clearError: function (atkmlId, fieldName) {\n            if (atkmlId in this.errors) {\n                const errors = this.errors[atkmlId].filter((error) => error.name !== fieldName);\n                this.errors[atkmlId] = [...errors];\n                if (errors.length === 0) {\n                    delete this.errors[atkmlId];\n                }\n            }\n        },\n        /**\n         * Update Multi-line Form input with all rowData values\n         * as JSON string.\n         */\n        updateInputValue: function () {\n            this.value = JSON.stringify(this.rowData);\n        },\n        /**\n         * Build rowData from JSON string.\n         */\n        buildRowData: function (jsonValue) {\n            const rows = JSON.parse(jsonValue);\n            rows.forEach((row) => {\n                row.__atkml = this.getUUID();\n            });\n\n            return rows;\n        },\n        /**\n         * Check if one of the field use expression.\n         */\n        hasExpression: function () {\n            return this.fieldData.filter((field) => field.isExpr).length > 0;\n        },\n        /**\n         * Send on change action to server.\n         * Use regular api call in order\n         * for return js to be fully evaluated.\n         */\n        fetchOnChangeAction: function (fieldName = null) {\n            if (this.hasChangeCb && (fieldName === null || this.eventFields.indexOf(fieldName) !== -1)) {\n                $(this.$refs.addBtn.$el).api({\n                    on: 'now',\n                    url: this.data.url,\n                    method: 'POST',\n                    data: { __atkml_action: 'on-change', rows: this.value },\n                });\n            }\n        },\n        postData: async function (row) {\n            const data = { ...row };\n            const context = this.$refs.addBtn.$el;\n            data.__atkml_action = 'update-row';\n            try {\n                return await atk.apiService.suiFetch(this.data.url, { data: data, method: 'POST', stateContext: context });\n            } catch (e) {\n                console.error(e);\n            }\n        },\n        /**\n         * Get expressions values from server.\n         */\n        fetchExpression: async function (atkmlId) {\n            if (this.hasExpression()) {\n                const row = this.findRow(atkmlId);\n                // server will return expression field - value if define.\n                if (row) {\n                    const resp = await this.postData(row);\n                    if (resp.expressions) {\n                        const fields = Object.keys(resp.expressions);\n                        fields.forEach((field) => {\n                            this.updateFieldInRow(atkmlId, field, resp.expressions[field]);\n                        });\n                        this.updateInputValue();\n                    }\n                }\n            }\n        },\n        findRow: function (atkmlId) {\n            return this.rowData.find((row) => row.__atkml === atkmlId);\n        },\n        getInputElement: function () {\n            return this.$refs.atkmlInput;\n        },\n        /**\n         * UUID v4 generator.\n         */\n        getUUID: function () {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n                const r = Math.floor(Math.random() * 16);\n                const v = c === 'x' ? r : (r & (0x3 | 0x8)); // eslint-disable-line no-bitwise\n\n                return v.toString(16);\n            });\n        },\n    },\n    computed: {\n        getSpan: function () {\n            return this.fieldData.length - 1;\n        },\n        getDeletables: function () {\n            return this.deletables;\n        },\n        /**\n         * Return Delete all checkbox state base on\n         * deletables entries.\n         */\n        getMainToggleState: function () {\n            let state = 'off';\n            if (this.deletables.length > 0) {\n                if (this.deletables.length === this.rowData.length) {\n                    state = 'on';\n                } else {\n                    state = 'indeterminate';\n                }\n            }\n\n            return state;\n        },\n        isDeleteDisable: function () {\n            return !this.deletables.length > 0;\n        },\n        isLimitReached: function () {\n            if (this.data.rowLimit === 0) {\n                return false;\n            }\n\n            return this.data.rowLimit < this.rowData.length + 1;\n        },\n    },\n};\n","import multilineRow from './multiline-row.component';\n\nexport default {\n    name: 'atk-multiline-body',\n    template: `\n        <sui-table-body>\n            <atk-multiline-row\n                :fields=\"fields\"\n                v-for=\"(row, i) in rows\" :key=\"row.__atkml\"\n                @onTabLastColumn=\"onTabLastColumn(i)\"\n                :rowId=\"row.__atkml\"\n                :isDeletable=\"isDeletableRow(row)\"\n                :rowValues=\"row\"\n                :error=\"getError(row.__atkml)\"\n            ></atk-multiline-row>\n        </sui-table-body>`,\n    props: ['fieldDefs', 'rowData', 'deletables', 'errors'],\n    data: function () {\n        return { fields: this.fieldDefs };\n    },\n    created: function () {\n    },\n    components: {\n        'atk-multiline-row': multilineRow,\n    },\n    computed: {\n        rows: function () {\n            return this.rowData;\n        },\n    },\n    emits: ['onTabLastRow'],\n    methods: {\n        onTabLastColumn: function (rowIndex) {\n            if (rowIndex + 1 === this.rowData.length) {\n                this.$emit('onTabLastRow');\n            }\n        },\n        isDeletableRow: function (row) {\n            return this.deletables.indexOf(row.__atkml) !== -1;\n        },\n        getError: function (rowId) {\n            if (rowId in this.errors) {\n                return this.errors[rowId];\n            }\n\n            return null;\n        },\n    },\n};\n","import atk from 'atk';\nimport multilineCell from './multiline-cell.component';\n\n/**\n * This will create a table td element using sui-table-cell.\n * The td element is created only if column as set isVisible = true;\n * The td element will add a multiline cell element.\n * the multiline cell will set it's own template component depending on the fieldType.\n * getValue\n */\nexport default {\n    name: 'atk-multiline-row',\n    template: `\n        <sui-table-row :verticalAlign=\"'middle'\">\n            <sui-table-cell textAlign=\"center\">\n                <input type=\"checkbox\" @input=\"onToggleDelete\" v-model=\"toDelete\" />\n            </sui-table-cell>\n            <sui-table-cell\n                v-for=\"(column, i) in columns\"\n                @keydown.tab=\"onTab(i)\"\n                v-bind=\"column.cellProps\"\n                :width=null\n                :state=\"getErrorState(column)\"\n                :style=\"{ overflow: 'visible' }\"\n            >\n                <atk-multiline-cell\n                    :cellData=\"column\"\n                    @update-value=\"onUpdateValue\"\n                    :fieldValue=\"getValue(column)\"\n                ></atk-multiline-cell>\n            </sui-table-cell>\n        </sui-table-row>`,\n    props: ['fields', 'rowId', 'isDeletable', 'rowValues', 'error'],\n    data: function () {\n        return { columns: this.fields };\n    },\n    components: {\n        'atk-multiline-cell': multilineCell,\n    },\n    computed: {\n        /**\n         * toDelete is bind by v-model, thus we need a setter for\n         * computed property to work.\n         * When isDeletable is pass, will set checkbox according to it's value.\n         */\n        toDelete: {\n            get: function () {\n                return this.isDeletable;\n            },\n            set: function (v) {\n                return v;\n            },\n        },\n    },\n    emits: ['onTabLastColumn'],\n    methods: {\n        onTab: function (columnIndex) {\n            if (columnIndex === this.columns.filter((column) => column.isEditable).length) {\n                this.$emit('onTabLastColumn');\n            }\n        },\n        getErrorState: function (column) {\n            if (this.error) {\n                const error = this.error.filter((e) => column.name === e.name);\n                if (error.length > 0) {\n                    return 'error';\n                }\n            }\n\n            return null;\n        },\n        getColumnWidth: function (column) {\n            return column.fieldOptions ? column.fieldOptions.width : null;\n        },\n        onEdit: function () {\n            this.isEditing = true;\n        },\n        onToggleDelete: function (e) {\n            atk.eventBus.emit(this.$root.$el.id + '-toggle-delete', { rowId: this.rowId });\n        },\n        onUpdateValue: function (fieldName, value) {\n            atk.eventBus.emit(this.$root.$el.id + '-update-row', { rowId: this.rowId, fieldName: fieldName, value: value });\n        },\n        getValue: function (column) {\n            return this.rowValues[column.name] || column.default;\n        },\n    },\n};\n","/* global flatpickr */ // loaded after main JS\n\n/**\n * Wrapper for vue-flatpickr-component component.\n * https://github.com/ankurk91/vue-flatpickr-component\n *\n * Properties:\n * config: Any of flatpickr options\n *\n * Will emit a dateChange event when date is set.\n */\nexport default {\n    name: 'atk-date-picker',\n    template: '<flatpickr-picker v-model=\"date\" :config=\"flatPickr\"></flatpickr-picker>',\n    props: ['config', 'value'],\n    data: function () {\n        const { useDefault, ...fpickr } = this.config;\n\n        if (useDefault && !fpickr.defaultDate && !this.value) {\n            fpickr.defaultDate = new Date();\n        } else if (this.value) {\n            fpickr.defaultDate = this.value;\n        }\n\n        if (!fpickr.locale) {\n            fpickr.locale = flatpickr.l10ns.default;\n        }\n\n        return {\n            flatPickr: fpickr,\n            date: null,\n        };\n    },\n    emits: ['setDefault'],\n    mounted: function () {\n        // if value is not set but default date is, then emit proper string value to parent.\n        if (!this.value && this.flatPickr.defaultDate) {\n            if (this.flatPickr.defaultDate instanceof Date) {\n                this.$emit('setDefault', flatpickr.formatDate(this.config.defaultDate, this.config.dateFormat));\n            } else {\n                this.$emit('setDefault', this.flatPickr.defaultDate);\n            }\n        }\n    },\n};\n","import atk from 'atk';\n\n/**\n * Wrapper for Fomantic-UI dropdown component into a lookup component.\n *\n * Properties:\n * config:\n * url: the callback URL. Callback should return model data in form of { key: modelId, text: modelTitle, value: modelId }\n * reference: the reference field name associate with model or hasOne name. This field name will be sent along with URL callback parameter as of 'field=name'.\n * ui: the css class name to apply to dropdown.\n * Note: The remaining config object may contain any or sui-dropdown { props: value } pair.\n *\n * value: The selected value.\n * optionalValue: The initial list of options for the dropdown.\n */\nexport default {\n    name: 'atk-lookup',\n    template: `\n        <sui-dropdown\n            v-bind=\"dropdownProps\"\n            ref=\"drop\"\n            ` /* :loading=\"isLoading\" */\n            + `@update:modelValue=\"onChange\"\n            @filtered=\"onFiltered\"\n            v-model=\"current\"\n            :class=\"css\"\n        ></sui-dropdown>`,\n    props: ['config', 'value', 'optionalValue'],\n    data: function () {\n        const {\n            url, reference, ui, ...suiDropdown\n        } = this.config;\n        suiDropdown.selection = true;\n\n        return {\n            dropdownProps: suiDropdown,\n            current: this.value,\n            url: url || null,\n            css: [ui],\n            isLoading: false,\n            field: reference,\n            query: '',\n            temp: '',\n        };\n    },\n    mounted: function () {\n        if (this.optionalValue) {\n            this.dropdownProps.options = Array.isArray(this.optionalValue) ? this.optionalValue : [this.optionalValue];\n        }\n    },\n    emits: ['update:modelValue'],\n    methods: {\n        onChange: function (value) {\n            this.current = value.value;\n            this.$emit('update:modelValue', this.current);\n        },\n        /**\n         * Receive user input text for search.\n         */\n        onFiltered: function (inputValue) {\n            if (inputValue) {\n                this.isLoading = true;\n            }\n\n            if (!this.onFiltered.debouncedFx) {\n                this.onFiltered.debouncedFx = atk.createDebouncedFx(() => {\n                    this.onFiltered.debouncedFx = null;\n                    if (this.query !== this.temp) {\n                        this.query = this.temp;\n                        if (this.query) {\n                            this.fetchItems(this.query);\n                        }\n                    }\n                }, 250);\n            }\n            this.temp = inputValue;\n            this.onFiltered.debouncedFx(this);\n        },\n        /**\n         * Fetch new data from server.\n         */\n        fetchItems: async function (q) {\n            try {\n                const data = { atkVueLookupQuery: q, atkVueLookupField: this.field };\n                const response = await atk.apiService.suiFetch(this.url, { method: 'get', data: data });\n                if (response.success) {\n                    this.dropdownProps.options = response.results;\n                }\n            } catch (e) {\n                console.error(e);\n            } finally {\n                this.isLoading = false;\n            }\n        },\n    },\n};\n"],"names":["name","template","components","props","emits","methods","onInput","event","this","$emit","target","value","atkDatePicker","atkLookup","data","fieldName","cellData","type","inputName","inputValue","fieldValue","getComponent","definition","component","getComponentProps","readOnlyValue","componentProps","columns","fields","isDeleteAll","onToggleDeleteAll","$nextTick","atk","$root","$el","id","isOn","$refs","check","checked","getTextAlign","column","align","isEditable","getVisibleColumns","count","forEach","field","isVisible","hasError","Object","keys","errors","length","hasCaption","caption","getErrorMsg","rows","i","error","filter","col","msg","computed","isIndeterminate","state","isChecked","form","formName","rowData","fieldData","eventFields","deletables","hasChangeCb","tableProp","basic","celled","collapsing","stackable","inverted","tableProps","fieldDefs","created","multilineCell","toDelete","get","isDeletable","set","v","onTab","columnIndex","getErrorState","e","getColumnWidth","fieldOptions","width","onEdit","isEditing","onToggleDelete","rowId","onUpdateValue","getValue","rowValues","default","onTabLastColumn","rowIndex","isDeletableRow","row","indexOf","__atkml","getError","multilineHeader","mounted","buildRowData","updateInputValue","payload","onUpdate","splice","push","onTabLastRow","isLimitReached","addOnTab","onAdd","newRow","createRow","afterAdd","JSON","parse","fetchExpression","fetchOnChangeAction","onDelete","atkmlId","deleteRow","afterDelete","updateFieldInRow","clearError","debouncedFx","call","getUUID","findIndex","stringify","jsonValue","hasExpression","isExpr","$","addBtn","api","on","url","method","__atkml_action","postData","async","context","stateContext","console","findRow","resp","expressions","find","getInputElement","atkmlInput","replace","c","r","Math","floor","random","toString","getSpan","getDeletables","getMainToggleState","isDeleteDisable","rowLimit","useDefault","fpickr","config","defaultDate","Date","locale","flatpickr","l10ns","flatPickr","date","formatDate","dateFormat","reference","ui","suiDropdown","selection","dropdownProps","current","css","isLoading","query","temp","optionalValue","options","Array","isArray","onChange","onFiltered","fetchItems","q","atkVueLookupQuery","atkVueLookupField","response","success","results"],"sourceRoot":""}