{"version":3,"file":"js/atk-vue-multiline.min.js","mappings":"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","sources":["webpack://atk/./src/vue-components/multiline/multiline-readonly.component.js","webpack://atk/./src/vue-components/multiline/multiline-header.component.js","webpack://atk/./src/vue-components/multiline/multiline.component.js","webpack://atk/./src/vue-components/multiline/multiline-body.component.js","webpack://atk/./src/vue-components/multiline/multiline-row.component.js","webpack://atk/./src/vue-components/multiline/multiline-cell.component.js","webpack://atk/./src/vue-components/multiline/multiline-textarea.component.js","webpack://atk/./src/vue-components/share/atk-date-picker.js","webpack://atk/./src/vue-components/share/atk-lookup.js"],"sourcesContent":["/**\n * Simply display a readonly value.\n */\nexport default {\n    template: '<div>{{readOnlyValue}}</div>',\n    name: 'atk-multiline-readonly',\n    props: ['readOnlyValue'],\n};\n","import atk from 'atk';\n\nexport default {\n    name: 'atk-multiline-header',\n    template: `\n     <sui-table-header>\n       <sui-table-row v-if=\"hasError()\">\n        <sui-table-cell :style=\"{ background: 'none' }\"></sui-table-cell>\n        <sui-table-cell :style=\"{ background: 'none' }\" state=\"error\" v-for=\"(column, idx) in columns\" :key=\"idx\" v-if=\"column.isVisible\" :textAlign=\"getTextAlign(column)\"><sui-icon name=\"attention\" v-if=\"getErrorMsg(column)\"></sui-icon>{{getErrorMsg(column)}}</sui-table-cell>\n      </sui-table-row>\n       <sui-table-row v-if=\"hasCaption()\">\n        <sui-table-headerCell :colspan=\"getVisibleColumns()\">{{caption}}</sui-table-headerCell>\n       </sui-table-row>\n        <sui-table-row :verticalAlign=\"'top'\">\n        <sui-table-header-cell width=\"one\" textAlign=\"center\"><input type=\"checkbox\" @input=\"onToggleDeleteAll\" :checked.prop=\"isChecked\" :indeterminate.prop=\"isIndeterminate\" ref=\"check\"></sui-table-header-cell>\n        <sui-table-header-cell v-for=\"(column, idx) in columns\" :key=\"idx\" v-if=\"column.isVisible\" :textAlign=\"getTextAlign(column)\">\n         <div>{{column.caption}}</div>\n         <div :style=\"{ position: 'absolute', top: '-22px' }\" v-if=\"false\"><sui-label pointing=\"below\" basic color=\"red\" v-if=\"getErrorMsg(column)\">{{getErrorMsg(column)}}</sui-label></div>\n        </sui-table-header-cell>\n      </sui-table-row>\n    </sui-table-header>\n  `,\n    props: ['fields', 'state', 'errors', 'caption'],\n    data: function () {\n        return { columns: this.fields, isDeleteAll: false };\n    },\n    methods: {\n        onToggleDeleteAll: function () {\n            this.$nextTick(() => {\n                atk.eventBus.emit(this.$root.$el.id + '-toggle-delete-all', { isOn: this.$refs.check.checked });\n            });\n        },\n        getTextAlign: function (column) {\n            let align = 'left';\n            if (!column.isEditable) {\n                switch (column.type) {\n                    case 'integer':\n                    case 'float':\n                    case 'atk4_money':\n                        align = 'right';\n\n                        break;\n                }\n            }\n\n            return align;\n        },\n        getVisibleColumns: function () {\n            let count = 1; // add deletable column;\n            this.columns.forEach((field) => {\n                count = field.isVisible ? count + 1 : count;\n            });\n\n            return count;\n        },\n        hasError: function () {\n            return Object.keys(this.errors).length > 0;\n        },\n        hasCaption: function () {\n            return this.caption;\n        },\n        getErrorMsg: function (column) {\n            if (this.hasError()) {\n                const rows = Object.keys(this.errors);\n                for (let i = 0; i < rows.length; i++) {\n                    const error = this.errors[rows[i]].filter((col) => col.name === column.name);\n                    if (error.length > 0) {\n                        return error[0].msg;\n                    }\n                }\n            }\n\n            return null;\n        },\n    },\n    computed: {\n        isIndeterminate: function () {\n            return this.state === 'indeterminate';\n        },\n        isChecked: function () {\n            return this.state === 'on';\n        },\n    },\n};\n","import $ from 'external/jquery';\nimport atk from 'atk';\nimport multilineBody from './multiline-body.component';\nimport multilineHeader from './multiline-header.component';\n\nexport default {\n    name: 'atk-multiline',\n    template: `<div>\n                <sui-table v-bind=\"tableProp\">\n                  <atk-multiline-header :fields=\"fieldData\" :state=\"getMainToggleState\" :errors=\"errors\" :caption=\"caption\"></atk-multiline-header>\n                  <atk-multiline-body @onTabLastRow=\"onTabLastRow\" :fieldDefs=\"fieldData\" :rowData=\"rowData\" :deletables=\"getDeletables\" :errors=\"errors\"></atk-multiline-body>\n                  <sui-table-footer>\n                    <sui-table-row>\n                        <sui-table-header-cell />\n                        <sui-table-header-cell :colspan=\"getSpan\" textAlign=\"right\">\n                        <div is=\"sui-button-group\">\n                         <sui-button size=\"small\" @click.stop.prevent=\"onAdd\" type=\"button\" icon=\"plus\" ref=\"addBtn\" :disabled=\"isLimitReached\"></sui-button>\n                         <sui-button size=\"small\" @click.stop.prevent=\"onDelete\" type=\"button\" icon=\"trash\" :disabled=\"isDeleteDisable\"></sui-button>\n                         </div>\n                        </sui-table-header-cell>\n                    </sui-table-row>\n                  </sui-table-footer>\n                </sui-table>\n                <div><input :form=\"form\" :name=\"name\" type=\"hidden\" :value=\"value\" ref=\"atkmlInput\"></div>\n             </div>`,\n    props: {\n        data: Object,\n    },\n    data: function () {\n        const tableDefault = {\n            basic: false,\n            celled: false,\n            collapsing: false,\n            stackable: false,\n            inverted: false,\n        };\n\n        return {\n            form: this.data.formName,\n            value: this.data.inputValue,\n            name: this.data.inputName, // form input name where to set multiline content value.\n            rowData: [],\n            fieldData: this.data.fields || [],\n            eventFields: this.data.eventFields || [],\n            deletables: [],\n            hasChangeCb: this.data.hasChangeCb,\n            errors: {},\n            caption: this.data.caption || null,\n            tableProp: { ...tableDefault, ...this.data.tableProps || {} },\n        };\n    },\n    components: {\n        'atk-multiline-body': multilineBody,\n        'atk-multiline-header': multilineHeader,\n    },\n    mounted: function () {\n        this.rowData = this.buildRowData(this.value ? this.value : '[]');\n        this.updateInputValue();\n\n        atk.eventBus.on(this.$root.$el.id + '-update-row', (payload) => {\n            this.onUpdate(payload.rowId, payload.fieldName, payload.value);\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-toggle-delete', (payload) => {\n            const idx = this.deletables.indexOf(payload.rowId);\n            if (idx > -1) {\n                this.deletables.splice(idx, 1);\n            } else {\n                this.deletables.push(payload.rowId);\n            }\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-toggle-delete-all', (payload) => {\n            this.deletables = [];\n            if (payload.isOn) {\n                this.rowData.forEach((row) => {\n                    this.deletables.push(row.__atkml);\n                });\n            }\n        });\n\n        atk.eventBus.on(this.$root.$el.id + '-multiline-rows-error', (payload) => {\n            this.errors = { ...payload.errors };\n        });\n    },\n    methods: {\n        onTabLastRow: function () {\n            if (!this.isLimitReached && this.data.addOnTab) {\n                this.onAdd();\n            }\n        },\n        onAdd: function () {\n            const newRow = this.createRow(this.data.fields);\n            this.rowData.push(newRow);\n            this.updateInputValue();\n            if (this.data.afterAdd && typeof this.data.afterAdd === 'function') {\n                this.data.afterAdd(JSON.parse(this.value));\n            }\n            this.fetchExpression(newRow.__atkml);\n            this.fetchOnChangeAction();\n        },\n        onDelete: function () {\n            this.deletables.forEach((atkmlId) => {\n                this.deleteRow(atkmlId);\n            });\n            this.deletables = [];\n            this.updateInputValue();\n            this.fetchOnChangeAction();\n            if (this.data.afterDelete && typeof this.data.afterDelete === 'function') {\n                this.data.afterDelete(JSON.parse(this.value));\n            }\n        },\n        onUpdate: function (atkmlId, fieldName, value) {\n            this.updateFieldInRow(atkmlId, fieldName, value);\n            this.clearError(atkmlId, fieldName);\n            this.updateInputValue();\n\n            if (!this.onUpdate.debouncedFx) {\n                this.onUpdate.debouncedFx = atk.createDebouncedFx(() => {\n                    this.onUpdate.debouncedFx = null;\n                    this.fetchExpression(atkmlId);\n                    this.fetchOnChangeAction(fieldName);\n                }, 250);\n            }\n            this.onUpdate.debouncedFx.call(this);\n        },\n        /**\n         * Creates a new row of data and\n         * set values to default if available.\n         */\n        createRow: function (fields) {\n            const row = {};\n            fields.forEach((field) => {\n                row[field.name] = field.default;\n            });\n            row.__atkml = this.getUUID();\n\n            return row;\n        },\n        deleteRow: function (atkmlId) {\n            this.rowData.splice(this.rowData.findIndex((row) => row.__atkml === atkmlId), 1);\n            delete this.errors[atkmlId];\n        },\n        /**\n         * Update the value of the field in rowData.\n         */\n        updateFieldInRow: function (atkmlId, fieldName, value) {\n            this.rowData.forEach((row) => {\n                if (row.__atkml === atkmlId) {\n                    row[fieldName] = value;\n                }\n            });\n        },\n        clearError: function (atkmlId, fieldName) {\n            if (atkmlId in this.errors) {\n                const errors = this.errors[atkmlId].filter((error) => error.name !== fieldName);\n                this.errors[atkmlId] = [...errors];\n                if (errors.length === 0) {\n                    delete this.errors[atkmlId];\n                }\n            }\n        },\n        /**\n         * Update Multi-line Form input with all rowData values\n         * as JSON string.\n         */\n        updateInputValue: function () {\n            this.value = JSON.stringify(this.rowData);\n        },\n        /**\n         * Build rowData from JSON string.\n         */\n        buildRowData: function (jsonValue) {\n            const rows = JSON.parse(jsonValue);\n            rows.forEach((row) => {\n                row.__atkml = this.getUUID();\n            });\n\n            return rows;\n        },\n        /**\n         * Check if one of the field use expression.\n         */\n        hasExpression: function () {\n            return this.fieldData.filter((field) => field.isExpr).length > 0;\n        },\n        /**\n         * Send on change action to server.\n         * Use regular api call in order\n         * for return js to be fully evaluated.\n         */\n        fetchOnChangeAction: function (fieldName = null) {\n            if (this.hasChangeCb && (fieldName === null || this.eventFields.indexOf(fieldName) > -1)) {\n                $(this.$refs.addBtn.$el).api({\n                    on: 'now',\n                    url: this.data.url,\n                    method: 'POST',\n                    data: { __atkml_action: 'on-change', rows: this.value },\n                });\n            }\n        },\n        postData: async function (row) {\n            const data = { ...row };\n            const context = this.$refs.addBtn.$el;\n            data.__atkml_action = 'update-row';\n            try {\n                return await atk.apiService.suiFetch(this.data.url, { data: data, method: 'POST', stateContext: context });\n            } catch (e) {\n                console.error(e);\n            }\n        },\n        /**\n         * Get expressions values from server.\n         */\n        fetchExpression: async function (atkmlId) {\n            if (this.hasExpression()) {\n                const row = this.findRow(atkmlId);\n                // server will return expression field - value if define.\n                if (row) {\n                    const resp = await this.postData(row);\n                    if (resp.expressions) {\n                        const fields = Object.keys(resp.expressions);\n                        fields.forEach((field) => {\n                            this.updateFieldInRow(atkmlId, field, resp.expressions[field]);\n                        });\n                        this.updateInputValue();\n                    }\n                }\n            }\n        },\n        findRow: function (atkmlId) {\n            return this.rowData.find((row) => row.__atkml === atkmlId);\n        },\n        getInputElement: function () {\n            return this.$refs.atkmlInput;\n        },\n        /**\n         * UUID v4 generator.\n         */\n        getUUID: function () {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n                const r = Math.floor(Math.random() * 16);\n                const v = c === 'x' ? r : (r & (0x3 | 0x8)); // eslint-disable-line no-bitwise\n\n                return v.toString(16);\n            });\n        },\n    },\n    computed: {\n        getSpan: function () {\n            return this.fieldData.length - 1;\n        },\n        getDeletables: function () {\n            return this.deletables;\n        },\n        /**\n         * Return Delete all checkbox state base on\n         * deletables entries.\n         */\n        getMainToggleState: function () {\n            let state = 'off';\n            if (this.deletables.length > 0) {\n                if (this.deletables.length === this.rowData.length) {\n                    state = 'on';\n                } else {\n                    state = 'indeterminate';\n                }\n            }\n\n            return state;\n        },\n        isDeleteDisable: function () {\n            return !this.deletables.length > 0;\n        },\n        isLimitReached: function () {\n            if (this.data.rowLimit === 0) {\n                return false;\n            }\n\n            return this.data.rowLimit < this.rowData.length + 1;\n        },\n    },\n};\n","import multilineRow from './multiline-row.component';\n\nexport default {\n    name: 'atk-multiline-body',\n    template: `\n    <sui-table-body>\n      <atk-multiline-row v-for=\"(row, idx) in rows\" :key=\"row.__atkml\"\n      @onTabLastColumn=\"onTabLastColumn(idx)\"\n      :fields=\"fields\"\n      :rowId=\"row.__atkml\"\n      :isDeletable=\"isDeletableRow(row)\"\n      :rowValues=\"row\"\n      :error=\"getError(row.__atkml)\"></atk-multiline-row>\n    </sui-table-body>\n  `,\n    props: ['fieldDefs', 'rowData', 'deletables', 'errors'],\n    data: function () {\n        return { fields: this.fieldDefs };\n    },\n    created: function () {\n    },\n    components: {\n        'atk-multiline-row': multilineRow,\n    },\n    computed: {\n        rows: function () {\n            return this.rowData;\n        },\n    },\n    methods: {\n        onTabLastColumn: function (idx) {\n            if (idx + 1 === this.rowData.length) {\n                this.$emit('onTabLastRow');\n            }\n        },\n        isDeletableRow: function (row) {\n            return this.deletables.indexOf(row.__atkml) > -1;\n        },\n        getError: function (rowId) {\n            if (rowId in this.errors) {\n                return this.errors[rowId];\n            }\n\n            return null;\n        },\n    },\n};\n","import atk from 'atk';\nimport multilineCell from './multiline-cell.component';\n\n/**\n * This will create a table td element using sui-table-cell.\n * The td element is created only if column as set isVisible = true;\n * The td element will add a multiline cell element.\n * the multiline cell will set it's own template component depending on the fieldType.\n * getValue\n */\nexport default {\n    name: 'atk-multiline-row',\n    template: `\n    <sui-table-row :verticalAlign=\"'middle'\">\n        <sui-table-cell width=\"one\" textAlign=\"center\"><input type=\"checkbox\" @input=\"onToggleDelete\" v-model=\"toDelete\"></sui-table-cell>\n        <sui-table-cell @keydown.tab=\"onTab(idx)\" v-for=\"(column, idx) in columns\" :key=\"idx\" :state=\"getErrorState(column)\" v-bind=\"column.cellProps\" :style=\"{ overflow: 'visible' }\" v-if=\"column.isVisible\">\n         <atk-multiline-cell\n           :cellData=\"column\"\n           @update-value=\"onUpdateValue\"\n           :fieldValue=\"getValue(column)\"></atk-multiline-cell>\n        </sui-table-cell>\n    </sui-table-row>\n  `,\n    props: ['fields', 'rowId', 'isDeletable', 'rowValues', 'error'],\n    data: function () {\n        return { columns: this.fields };\n    },\n    components: {\n        'atk-multiline-cell': multilineCell,\n    },\n    computed: {\n    /**\n     * toDelete is bind by v-model, thus we need a setter for\n     * computed property to work.\n     * When isDeletable is pass, will set checkbox according to it's value.\n     */\n        toDelete: {\n            get: function () {\n                return this.isDeletable;\n            },\n            set: function (v) {\n                return v;\n            },\n        },\n    },\n    methods: {\n        onTab: function (idx) {\n            if (idx === this.columns.filter((column) => column.isEditable).length) {\n                this.$emit('onTabLastColumn');\n            }\n        },\n        getErrorState: function (column) {\n            if (this.error) {\n                const error = this.error.filter((e) => column.name === e.name);\n                if (error.length > 0) {\n                    return 'error';\n                }\n            }\n\n            return null;\n        },\n        getColumnWidth: function (column) {\n            return column.fieldOptions ? column.fieldOptions.width : null;\n        },\n        onEdit: function () {\n            this.isEditing = true;\n        },\n        onToggleDelete: function (e) {\n            atk.eventBus.emit(this.$root.$el.id + '-toggle-delete', { rowId: this.rowId });\n        },\n        onUpdateValue: function (fieldName, value) {\n            atk.eventBus.emit(this.$root.$el.id + '-update-row', { rowId: this.rowId, fieldName: fieldName, value: value });\n        },\n        getValue: function (column) {\n            return this.rowValues[column.name] || column.default;\n        },\n    },\n};\n","import multilineReadOnly from './multiline-readonly.component';\nimport multilineTextarea from './multiline-textarea.component';\nimport atkDatePicker from '../share/atk-date-picker';\nimport atkLookup from '../share/atk-lookup';\n\nexport default {\n    name: 'atk-multiline-cell',\n    template: `\n    <component :is=\"getComponent()\"\n        :fluid=\"true\"\n        class=\"fluid\"\n        @input=\"onInput\"\n        @onChange=\"onChange\"\n        v-model=\"inputValue\"\n        :name=\"inputName\"\n        ref=\"cell\"\n        v-bind=\"getComponentProps()\"></component>\n  `,\n    components: {\n        'atk-multiline-readonly': multilineReadOnly,\n        'atk-multiline-textarea': multilineTextarea,\n        'atk-date-picker': atkDatePicker,\n        'atk-lookup': atkLookup,\n    },\n    props: ['cellData', 'fieldValue'],\n    data: function () {\n        return {\n            fieldName: this.cellData.name,\n            type: this.cellData.type,\n            inputName: '-' + this.cellData.name,\n            inputValue: this.fieldValue,\n        };\n    },\n    methods: {\n        getComponent: function () {\n            return this.cellData.definition.component;\n        },\n        getComponentProps: function () {\n            if (this.getComponent() === 'atk-multiline-readonly') {\n                return { readOnlyValue: this.fieldValue };\n            }\n\n            return this.cellData.definition.componentProps;\n        },\n        onInput: function (value) {\n            this.inputValue = this.getTypeValue(value);\n            this.$emit('update-value', this.fieldName, this.inputValue);\n        },\n        onChange: function (value) {\n            this.onInput(value);\n        },\n        /**\n         * return input value based on their type.\n         */\n        getTypeValue: function (value) {\n            let r = value;\n            if (this.type === 'boolean') {\n                r = value.target.checked;\n            }\n\n            return r;\n        },\n    },\n};\n","export default {\n    name: 'atk-textarea',\n    template: '<textarea v-model=\"text\" @input=\"handleChange\"></textarea>',\n    props: { value: [String, Number] },\n    data: function () {\n        return { text: this.value };\n    },\n    methods: {\n        handleChange: function (event) {\n            this.$emit('input', event.target.value);\n        },\n    },\n};\n","/* global flatpickr */ // loaded after main JS\n\n/**\n * Wrapper for vue-flatpickr-component component.\n * https://github.com/ankurk91/vue-flatpickr-component\n *\n * Props:\n * config: Any of flatpickr options\n *\n * Will emit a dateChange event when date is set.\n */\n\nconst template = '<flatpickr-picker v-model=\"date\" :config=\"flatPickr\" @on-change=\"onChange\"></flatpickr-picker>';\n\nexport default {\n    name: 'atk-date-picker',\n    template: template,\n    props: ['config', 'value'],\n    data: function () {\n        const { useDefault, ...fpickr } = this.config;\n\n        if (useDefault && !fpickr.defaultDate && !this.value) {\n            fpickr.defaultDate = new Date();\n        } else if (this.value) {\n            fpickr.defaultDate = this.value;\n        }\n\n        if (!fpickr.locale) {\n            fpickr.locale = flatpickr.l10ns.default;\n        }\n\n        return {\n            flatPickr: fpickr,\n            date: null,\n        };\n    },\n    mounted: function () {\n        // if value is not set but default date is, then emit proper string value to parent.\n        if (!this.value && this.flatPickr.defaultDate) {\n            if (this.flatPickr.defaultDate instanceof Date) {\n                this.$emit('setDefault', flatpickr.formatDate(this.config.defaultDate, this.config.dateFormat));\n            } else {\n                this.$emit('setDefault', this.flatPickr.defaultDate);\n            }\n        }\n    },\n    methods: {\n        onChange: function (date) {\n            this.$emit('onChange', flatpickr.formatDate(date[0], this.flatPickr.dateFormat));\n        },\n    },\n};\n","import atk from 'atk';\n\n/**\n * Wrapper for Fomantic-UI dropdown component into a lookup component.\n *\n * Props:\n * config:\n * url: the callback URL. Callback should return model data in form of { key: modelId, text: modelTitle, value: modelId }\n * reference: the reference field name associate with model or hasOne name. This field name will be sent along with URL callback parameter as of 'field=name'.\n * ui: the css class name to apply to dropdown.\n * Note: The remaining config object may contain any or sui-dropdown { props: value } pair.\n *\n * value: The selected value.\n * optionalValue: The initial list of options for the dropdown.\n */\n\nconst template = `<sui-dropdown\n                    ref=\"drop\"\n                    v-bind=\"dropdownProps\"\n                    :loading=\"isLoading\"\n                    @input=\"onChange\"\n                    @filtered=\"onFiltered\"\n                    v-model=\"current\"\n                    :class=\"css\"></sui-dropdown>`;\n\nexport default {\n    name: 'atk-lookup',\n    template: template,\n    props: ['config', 'value', 'optionalValue'],\n    data: function () {\n        const {\n            url, reference, ui, ...suiDropdown\n        } = this.config;\n        suiDropdown.selection = true;\n\n        return {\n            dropdownProps: suiDropdown,\n            current: this.value,\n            url: url || null,\n            css: [ui],\n            isLoading: false,\n            field: reference,\n            query: '',\n            temp: '',\n        };\n    },\n    mounted: function () {\n        if (this.optionalValue) {\n            this.dropdownProps.options = Array.isArray(this.optionalValue) ? this.optionalValue : [this.optionalValue];\n        }\n    },\n    methods: {\n        onChange: function (value) {\n            this.$emit('onChange', value);\n        },\n        /**\n         * Receive user input text for search.\n         */\n        onFiltered: function (inputValue) {\n            if (inputValue) {\n                this.isLoading = true;\n            }\n\n            if (!this.onFiltered.debouncedFx) {\n                this.onFiltered.debouncedFx = atk.createDebouncedFx(() => {\n                    this.onFiltered.debouncedFx = null;\n                    if (this.query !== this.temp) {\n                        this.query = this.temp;\n                        if (this.query) {\n                            this.fetchItems(this.query);\n                        }\n                    }\n                }, 250);\n            }\n            this.temp = inputValue;\n            this.onFiltered.debouncedFx(this);\n        },\n        /**\n         * Fetch new data from server.\n         */\n        fetchItems: async function (q) {\n            try {\n                const data = { atkVueLookupQuery: q, atkVueLookupField: this.field };\n                const response = await atk.apiService.suiFetch(this.url, { method: 'get', data: data });\n                if (response.success) {\n                    this.dropdownProps.options = response.results;\n                }\n            } catch (e) {\n                console.error(e);\n            } finally {\n                this.isLoading = false;\n            }\n        },\n    },\n};\n"],"names":["name","template","props","data","columns","this","fields","isDeleteAll","methods","onToggleDeleteAll","$nextTick","atk","$root","$el","id","isOn","$refs","check","checked","getTextAlign","column","align","isEditable","type","getVisibleColumns","count","forEach","field","isVisible","hasError","Object","keys","errors","length","hasCaption","caption","getErrorMsg","rows","i","error","filter","col","msg","computed","isIndeterminate","state","isChecked","form","formName","value","inputValue","inputName","rowData","fieldData","eventFields","deletables","hasChangeCb","tableProp","basic","celled","collapsing","stackable","inverted","tableProps","components","fieldDefs","created","String","Number","text","handleChange","event","$emit","target","useDefault","fpickr","config","defaultDate","Date","locale","flatpickr","l10ns","default","flatPickr","date","mounted","formatDate","dateFormat","onChange","url","reference","ui","suiDropdown","selection","dropdownProps","current","css","isLoading","query","temp","optionalValue","options","Array","isArray","onFiltered","debouncedFx","fetchItems","async","q","atkVueLookupQuery","atkVueLookupField","response","method","success","results","e","console","fieldName","cellData","fieldValue","getComponent","definition","component","getComponentProps","readOnlyValue","componentProps","onInput","getTypeValue","r","toDelete","get","isDeletable","set","v","onTab","idx","getErrorState","getColumnWidth","fieldOptions","width","onEdit","isEditing","onToggleDelete","rowId","onUpdateValue","getValue","rowValues","onTabLastColumn","isDeletableRow","row","indexOf","__atkml","getError","multilineHeader","buildRowData","updateInputValue","payload","onUpdate","splice","push","onTabLastRow","isLimitReached","addOnTab","onAdd","newRow","createRow","afterAdd","JSON","parse","fetchExpression","fetchOnChangeAction","onDelete","atkmlId","deleteRow","afterDelete","updateFieldInRow","clearError","call","getUUID","findIndex","stringify","jsonValue","hasExpression","isExpr","$","addBtn","api","on","__atkml_action","postData","context","stateContext","findRow","resp","expressions","find","getInputElement","atkmlInput","replace","c","Math","floor","random","toString","getSpan","getDeletables","getMainToggleState","isDeleteDisable","rowLimit"],"sourceRoot":""}